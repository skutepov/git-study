Следующий нюанс, который я хочу обсудить,
следующий subsection в нашем документе, это
стандартные функции. LaTeX знает многие стандартные функции,
которые вам могут пригодиться. Если вы откроете пособие Львовского, то
там есть глава, посвященная набору математики, в ней есть раздел, в котором
перечислены функции, поддерживаемые LaTeX. Скажем, если я хочу написать,
что sin x = 5, Мне достаточно написать команду sin. Команда - это значит, что она начинается
с бэкслэша. Когда я это сделаю, LaTeX распознает, что
мне нужен именно синус, сделает его прямыми буквами,
название функции, как это и положено. Сделает небольшой пробел
перед буквой икс и продолжит обработку строки,
которая у меня написана. То же самое можно сделать с косинусом,
тангенсом, котангенсом, многими функциями, которые
вы привыкли использовать в математике. Скажем, если мне нужен натуральный
логарифм, я могу написать здесь просо ln, то есть те же самые буквы, которые всегда в жизни используют для написания
натурального логарифма. И у меня здесь будет натуральный логарифм. Что, если вам нужна какая-нибудь функция,
которая не известна LaTeX, то есть это какая-то специфическая
функция, которую используют в вашей отрасли науки или вы сами ее
придумали для своей научной статьи. Тогда можно сделать вот как, у меня в преамбуле здесь есть пример того, как это
сделано. "Свои команды" это называется. Есть такая команда \DeclareMathOperator,
вам ее можно не запоминать, потому что вы всегда можете найти ее здесь, скопировать
и сделать столько, столько команд, сколько
вам нужно. У нее вот такой синтаксис, сначала я пишу
то, как должна называться моя команда, то есть то,
как буду я ее вызывать. У меня это будет команда сигнум, и во
втором аргументе команды \DeclareMathOperator я
пишу, что же нужно сделать. И нужно сделать оператором mathop сделать буквы sgn, которые отвечают за команду
сигнум. Вы можете не вникать в то, как именно это сделано, пока вы не стали продвинутым
пользователем. Можете просто пользоваться, создавая по
аналогии свои функции. Если я теперь вместо логарифма здесь
напишу \sgn то до того, как я определил \DeclareMathOperator, LaTeX
стал бы ругаться, что это не известная ему
команда. Я определил эту команду в преамбуле, и теперь она обрабатывается так же, как
синус или косинус, то есть определение команды в преамбуле позволило мне
использовать ее дальше. Ну, сигнум икс равно пяти - это конечно не
может быть правдой. Давайте я исправлю на единичку. Слудующий нюанс, который мы обсудим, subsection, это символы. Существует огромное множество символов,
которые вы можете захотеть использовать в
формулах. Это как математические символы, так и
символы из других наук. Файл, который содержит неполный перечень
символов, которые вы можете использовать в LaTeX в математическом
режиме, занимает более 160 страниц. Этот файл вы можете найти в материалах
курса. Он написан по-английски, но, в
общем, текста там почти нет. Там нарисованы символы и команды, которые
за них отвечают. Вы найдете там, я не постесняюсь сказать,
все, что может вам понадобиться. Если вы что-то, что вам понадобится, не найдете там, значит вы, скорее всего, плохо
искали. Потому что это огромный набор символов на
все случаи жизни. Я сейчас покажу несколько
самых простых. Скажем, если я хочу написать, что дважды два... два, дальше times, команда, которую мы
уже встречали. Дважды два не равно пять. Для команды "не равно", существует
специальная команда ne которая расшифровывается как non equal, не
равно пять. Давайте запустим, посмотрим, что
получается. Дважды два не равно пять. То есть команды обработались так, как это
нам было нужно. Давайте сделаем еще что-нибудь. Скажем, я хочу сказать, что какое-нибудь там множество А пересекает
множество B. Символ пересечения, как вы может быть знаете, это такая "подкова", направленная
рогами вниз. Она напоминает головной убор. И здесь, чтобы ее создать, нужно написать
cap, A \cap B - это значит пересечение множества А
и B. Я не буду пока запускать, напишу по
соседству еще одну команду. А объединение с B, объединение - это подкова, направленная вверх, и она
напоминает некую чашу. Здесь она задается командой cup. A \cup B. Вы можете видеть, что получилось. Это только самые основные примеры. Если вы откроете тот самый файл с
символами на 160 страниц или пособие Львовского
с соответствующей главой, которая называется "Таблица спецзнаков с
комментариями", то вы найдете множество символов, которые могут вам пригодиться, которые каким-то удобным образом
классифицированы. Иногда для работы с некоторыми символами потребуется подключение
дополнительных пакетов. Очень многие символы содержатся в пакетах,
ну, или в стандартном LaTeX, или в пакетах AMS, которые у нас здесь
подключены с самого начала. Но, если какой-то символ содержится в
пакете, который вы еще не покдлючили, то вы всегда можете подключить
его точно такой же командой usepackage. Так, следующий нюанс, который мы обсудим, это диакритические знаки. Диакритические знаки - это символы, которые расположены над или под другими
символами. Скажем, если я хочу написать, что у
меня переменная икс равна пяти. С этой формулой все понятно, просто икс
равно пяти. А что, если мне нужно чтобы не просто икс, а икс с чертой было равно пяти, с чертой
сверху. Тогда я могу использовать команду bar
просто перед командой икс, я напишу \bar x = 5. Если я запущу это на обработку, то я увижу, что у меня получился икс с
чертой. Если икс с чертой равно пяти, а икс
с тильдой или с волной сверху равен восьми, то нужно так и
написать - тильда икс равна восьми. Запустим, и диакритический знак уже другой -
это тильда. Открыв любое пособие по LaTeX,
например, Львовского, вы найдете полный набор
диакритических символов. Там есть французские аксаны, которые в
разные стороны направлены. Там есть точки, несколько точек, тильда,
домик, черта и много других. Обратите внимание, как я здесь написал эти
команды. Мне нужно, чтобы bar, то есть черта и
тильда, стояли над одной буквой. Почти всегда, когда я хочу скормить
команде аргумент из одного символа, можно не
ставить фигурные скобки. То есть я тут мог поставить фигурные
скобки, вот, написать так, bar с фигурными скобками
икс. Но это привело бы точно к такому же
результату. То есть у команды bar есть один аргумент,
который может быть в фигурных скобках, но если он состоит из одного символа, то
эти фигурные скобки можно игнорировать. Если я хочу, чтобы черта стояла сразу над
несколькими символами, скажем, я хочу, чтобы черта стояла над
икс, игрек, зет. Тогда фигурные скобки мне понадобятся
обязательно. И я пишу bar, дальше в фигурных скобках аргумент, состоящий из
нескольких символов. Запускаем, и результат не должен нас
устраивать. Потому что верхняя черта оказалась такой
же ширины, как всегда, то есть, как она была до
этого. В итоге она оказалась шириной в один
символ, причем она даже оказалась не совсем над игреком, а
где-то смещена немножко влево. То есть никак нельзя понять по этому
результату, что я хотел, чтобы черта была над икс, игрек,
зет. Если я хочу черту подлиннее, то вместо
команды bar, нужно использовать другую команду,
overline, линия сверху. Вот, теперь другое дело. Команда overline поставила длинную черту
над всеми тремя символами, которые есть у нее
в аргументе. Если я напишу сюда больше символов в
аргумент, команду overline запущу на обработку, то черта будет
такой длины, какой нужно. То же самое с тильдой. Если мне нужна длинная тильда, над
каким-нибудь длинным выражением, то обычный символ,
который мы использовали до этого, приведет к тому же нехорошему результату, который был и с
командой bar. Но есть специальная команда, которая,
которую очень просто запомнить widetilde - широкая
тильда. Если я запущу это на обработку, то тильда
растянулась. Но это не очень симпатично, поэтому я
советую вам дважды подумать, прежде чем использовать какие-то переменные, состоящие из такого количества
букв. И ставить над ними тильдами. И ставить над ними тильды. Следующий нюанс, следующая проблема, с
которой вы можете столкнуться в наборе формул - это буквы других алфавитов. Чаще всего нужны греческие буквы. Есть такая традиция, что переменные
обозначаются латинскими буквами, в первую и во вторую очередь
греческими. Если у вас под рукой греческая клавиатура,
с греческой раскладкой, то вы можете её использовать, но я предполагаю,
что скорее всего у вас её нет. Поэтому вам понадобятся специальные
команды для написания греческих букв. Давайте попробуем написать что тангенс
альфа равен единице. И я пишу команду тангенс. Теперь мне нужна буква альфа. Буква альфа пишется очень просто. Есть команда- альфа. Вот и все. Она пишется так же, как и названи этой
греческой буквы. У меня написано тангенс альфа равно
единице. Запустим. Мы увидим греческую букву альфа. Эээ. . Вы легко найдете или у Львовского, или где-нибудь ещё греческий алфавит с
соответствующими командами. Там никогда нет ничего сложного. Все буквы названы так, как они
называны в греческом алфавите. Если вам нужна заглавная какая-нибудь
буква, скажем, заглавная буква фи, то нужно просто написать её с
заглавной буквы. То есть команда, команда, которая задает
строчную, команда, которая задает строчную фи - это три маленькие буквы
phi, которые делают букву фи. А команда, которая задает заглавную фи, -
это те же самые три буквы, только первая из них
тоже заглавная. Это надо просто запомнить. Есть два нюанса, нет, три нюанса, связанные
с греческими буквами. Первое: если вам нужна заглавная буква
альфа, давайте попробуем. Что, если я хочу получить заглавную букву
альфа, то есть я напишу альфа с большой буквы. Запустим, и я поздравляю вас, впервые мы
получили ошибку. Ошибка показана в нижней части экрана
в программе TeXstudio. В других программах она может быть в
других местах. Здесь написано: undefined control
sequence $\Alpha. Это значит, что LaTeX неизвестна такая
команда, как алфа с большой буквы. Казалось бы, довольно простая команда. Почему она неизвестна LaTeX? А потому, что вам никогда не понадобится
заглавная греческая буква альфа. Поэтому в LaTeX нет специальной команды
для неё. Вам не понадобится её использовать. Поэтому мы не будем её использовать,
удалим... Оставшиеся два нюанса связаны с тем, как
две греческие буквы принято писать в научных статьях
на разных языках. Вот есть такая буква как эпсилон, которую
вы возможно знаете. Если я напишу, да, давайте я сразу обе
напишу: эпсилон, а вторая - эта та самая фи, только
строчная. Запустим, ага. . Эпсилон я написал с ошибкой, видите, с
опечаткой. Поэтому я удалю ненужные символы. Итак, две строчные буквы эпсилон и фи... ага, и фи я написал с ошибкой, смотрите, я
забыл бэкслэш. Теперь я его ставлю, теперь это настоящая
команда, теперь должно быть все хорошо. Вот, у меня две буквы эпсилон и фи
оказались в итоговом PDF-документе. Возможно, вы привыкли видеть эти буквы
другими, если вы привыкли читать русские книжки по
математике. Для того чтобы написать буквы эпсилон и фи
в привычном для русского читателя виде, нужно использовать
команды varepsilon, то есть вариация эпсилон, и varphi. Запустим... Вот, те же самые буквы в другом начертании в PDF-документе, вот здесь, во второй
строке из тех, которые я выделяю, в том виде, в
котором принято писать в русской традиции. В одном из следующих занятий мы с вами научимся переопределять команды, то
есть написать что-то в преамбуле,
после чего вы можете забыть про varepsilon, varphi. Писать обычные epsilon и phi, и там будут
те, то начертание букв, которое вам нужно, с помощью каких-то
специальных макросов. Ну пока, если вам срочно нужен, срочно
нужны эти где-то греческие буквы в таком начертании, то используйте команды с
префиксом var.