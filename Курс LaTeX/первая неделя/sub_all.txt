1.1.1
Здравствуйте, меня зовут Данил Фёдоровых,
и я приветствую вас на курсе «Документы и презентации в LaTeX»,
представленный Высшей школой экономики для
онлайн-университета Coursera. В этом видео я расскажу вам, что
представляет из себя издательская система LaTeX, откуда она взялась и какие у нее
есть преимущества и недостатки. Если вы уже знаете ответы на эти вопросы,
то можете переходить к видео № 2. Издательская система LaTeX настолько
огромна и разнообразна со всеми ее надстройками и возможностями, что за короткий
полуторамесячный курс мы не сможем их все изучить. И вряд ли в мире есть хотя бы один человек, который может сказать, что он
изучил их все. Однако, к концу курса вы сможете
изготовить с помощью этой издательской системы своё эссе или реферат
или написать книжку или диссертацию. И я уверяю вас, что если вы подойдёте к
изучению курса достаточно тщательно, то качество,
которое у вас получится в итоге. будет несравнимо с тем, что вы привыкли
видеть в популярных текстовых процессорах, которые
установлены у вас на компьютере. Кроме того, в конце курса мы научимся
делать высококачественные презентации. Например, слайды презентации, которую я
вам сейчас показываю, сделаны в LaTeX. Особенно это удобно, если вы делаете
презентацию на основе какого-нибудь доклада или статьи,
написанной с помощью этой издательской системы. LaTeX хорош во всём, что касается оформления и автоматизации
рутинных процессов. Поэтому я надеюсь, что изучение этого
курса полностью изменит то, как вы работаете с
документами, потому что LaTeX позволяет сконцентрироваться на
структуре документа и его содержании, оставляя все что касается оформления и
дизайна издательской системе. Кроме того одной из моих задач на этом
курсе является научить вас использовать обширную систему
поддержки, которая существует у издательской системы
LaTeX. Про LaTeX написаны десятки хороших книг,
есть огромные форумы, на которых тысячи пользователей готовы помочь вам
разобраться с задачами, которые вам предстоит решать. Давайте сразу договоримся, что мы будем правильно произносить название этой
системы. Буквы, которые вы перед собой видите, это
не русские буквы и не английские, а греческие буквы: тау,
эпсилон и хи. Поэтому название читается именно как «тех
», а не «текс». А название усовершенствованной системы
читается как «латех», а не «латекс». Иногда это вызывает некоторые проблемы. Например, если вам больше 18 лет, то вы можете зайти в сервис Google Images,
ввести там запрос «latex» и увидеть, что многие
картинки на первой странице выдачи не касаются
издательской системы. TeX был изобретён Дональдом Кнутом в конце
70-х годов. Когда он собирался издать один из томов своего фундаментального произведения
«Искусство программирования», он был удивлён, насколько низкое качество полиграфии предоставляли тогдашние системы
компьютерной верстки. Он поставил перед собой задачу создать
новую издательскую систему, которая, во-первых,
была бы бесплатной, и, во-вторых, одинаково хорошо работала бы во
всех операционных системах, и, в-третьих, предоставляла бы
высокое качество полиграфии. Результатом этой работы стала издательская
система TeX и система отрисовки шрифтов METAFONT. Система TeX была достаточно сложна,
фактически это был язык программирования, и для того, что начать ею пользоваться
нужна была специальная подготовка. В 80-х годах Лесли Лэмпорт
усовершенствовал систему, не только добавив первые две буквы своей фамилии к названию, но и упростив многие процессы, которые нужно выполнять, чтобы
делать хорошие документы. Благодаря Кнуту, Лэмпорту и тысячам их последователей, которые продолжают
усовершенствовать систему, у нас сейчас есть комплекс довольно простых
программ, которые позволяют быстро освоиться с издательской
системой LaTeX. Что представляет из себя LaTeX с точки
зрения автора текста? Во-первых, он не похож на Microsoft Word, текстовый процессор, которым вы, скорее
всего, привыкли пользоваться. В отличие от Word'а, когда вы набираете
текст в LaTeX, вы видите его не таким, каким он будет, когда вы
отправите его печатать на принтер. Потому что с точки зрения LaTeX,
содержание текста и его оформление – это две разные задачи, и приступать к оформлению нужно
только после того, как содержание или его
фрагменты готовы. У такого подхода есть свои достоинства и
недостатки. Во-первых, вам не нужно думать о том,
чтобы заголовки никуда не «уехали», чтобы всё было оформлено в едином стиле, чтобы колонтитулы были
правильными. Вы думаете только о содержании вашего
документа. Всё остальное LaTeX сделает за вас. Во-вторых, такой подход создаёт некоторые
сложности, потому что в отличие от того же Word'а вы не можете
просто взять мышкой и перетянуть полоску, чтобы
изменить размер полей, или с помощью перетаскивания разместить
картинку там, где вам нужно. Однако итоговое качество вёрстки и
возможности по автоматизации рутинных процессов, которые предоставляет LaTeX, с
лихвой перекрывают все эти недостатки. Для многих ученых, особенно в точных
науках и в математике, LaTeX стал стандартом для
написания научных статей. Многие научные журналы, особенно западные, рекомендуют своим авторам использовать
именно LaTeX для оформления статей, потому что это
удобнее самим авторам и журналам. Документ, который вы получаете, будет в формате PDF, поэтому вы сможете открыть
его в любой операционной системе без ущерба для качества и напечатать на любом
принтере. А исходный текст, который вы пишете и
который потом обрабатывает система, можно редактировать в любом
текстовом редакторе и даже в Блокноте. За несколько десятилетий существования
этой издательской системы тысячи людей со всего мира приложили свою руку к ее
совершенствованию. Написаны тысячи расширений, которые
позволяют решать совершенно разные задачи. От построения графиков до рисования
картинок шахматных задач и нот. Одна из задач, которую Дональд Кнут
изначально ставил перед своей системой, – это обработка
математических формул. Поэтому с этой задачей LaTeX справляется
блестяще. На этом слайде вы видите несколько
примеров, как можно создавать простейшие формулы с
помощью языка LaTeX. Например, чтобы получить выражение дважды
два равно четыре, нужно написать 2, команду times, которая отвечает за знак
умножения, ещё одну 2, = и 4. Создание дроби – немножко более сложная
задача. Вам нужно написать специальную команду
frac (от слова fraction), написать отдельно
числитель и знаменатель, и LaTeX автоматически
обработает дробь так, чтобы она выглядела хорошо. Если вам нужна более сложная дробь,
например, вот такая трехэтажная, то это значит, что вам нужно написать дробь: ее числитель 1,
а в знаменателе 1, плюс еще одна дробь. LaTeX сам подберёт размер цифр так, чтобы
это выглядело хорошо на бумаге. Множество расширений LaTeX'а посвящены
различным символам, в том числе иногда довольно экзотическим. Файл, который содержит перечисление
символов, с командами LaTeX'а, которые нужны для их вёрстки, занимает более 160
страниц. Здесь вы видите несколько примеров того, какие символы позволяет вставить LaTeX в
документ. Как я уже сказал, иногда вставка графиков
в документ вызывает некоторые сложности. Поскольку ваш исходный файл является
обычным текстовым документом, то вы не можете встроить картинку прямо в
него. Вам нужно, чтобы файл с картинкой лежал в
той же папке, и вы сможете вызвать его простой
командой. Однако специальные расширения, написанные
для рисования графиков, позволяют делать это прямо
средствами LaTeX. Например, посмотрите на этот график спроса и предложения, знакомый всякому, кто
изучал экономику. Расширение Tikz, предназначенное для
построения изображений, позволяет для такого графика просто задать уравнение
кривых спроса и предложения. Точка их пересечения будет рассчитана этим
пакетом самостоятельно, и пунктирные линии, отвечающие за равновесие, будут построены
автоматически на тех координатах, которые удастся
посчитать. С помощью небольших манипуляций с исходным
кодом я могу продемонстрировать на этом графике
введение налога. Мне достаточно просто написать, чему этот налог равен, и все нужные
координаты будут рассчитаны сами собой. Так же сами собой будут заштрихованы
нужные области. Если я хочу снизить ставку потоварного
налога, то мне нужно всего лишь изменить одну цифру в исходном коде, и все будет перерисовано и координаты будут
рассчитаны заново. Повторюсь: я получил второй график
изменением всего лишь одной цифры в исходном коде. На третьем графике вы видите, что кривая
предложения немножко сдвинулась вниз. Теперь она выходит из начала координат, а
не из точки выше этого начала, как было
раньше. Опять же, я поменял всего одну цифру в исходном коде в уравнении кривой
предложения, и новое равновесие было рассчитано
автоматически: автоматически были построены пунктирные линии и
закрашены нужные области. В следующем видеофрагменте мы познакомимся
с основными программными средствами, которые существуют для создания LaTeX
документов, и сделаем наш первый документ. Спасибо за внимание.1.1.2
Мы продолжаем разбираться в том, как
работает издательская система LaTeX. И в этом видео я покажу вам, как устроена логика взаимодействия
пользователя с этой системой. Но прежде я бы хотел сказать несколько
слов о том, где вы можете брать информацию о том, как делать те или иные вещи в этой
системе, если у вас возникнут вопросы. Существует несколько хороших учебных
пособий по LaTeX, написанных, в том числе, и
по-русски. Я здесь привожу ссылку на одно из них - это пособие Сергея Львовского,
оно на мой взгляд, является самой
лучшей книгой для тех, кто только начинает изучать эту
систему. К сожалению, Сергей Львовский написал эту
книгу больше десяти лет назад. И некоторые вещи там уже устарели. Но для новичка многое из того, что там
написано, будет очень полезно. Если что-то, что вам нужно сделать, не
написано у Львовского, то есть и другие учебные пособия, список которых, рекомендуемых мной, вы найдете в
материалах курса. Если в процессе того, как вы
изучаете этот курс, у вас будут возникать вопросы,
как делать те или иные вещи, то вы всегда можете зайти на форум и задать свои вопросы
нашим экспертам. Когда этот курс закончится, я
призываю вас оставаться на связи с помощью группы ВКонтакте, которую я сделал для курса изучения LaTeX в Высшей школе
экономики. Ссылку на нее вы увидите на слайде. Конечно, по-английски источников гораздо
больше. В том числе, очень новых и очень
современных. Список того, что я рекомендую читать по-английски, вы найдете в
материалах курса. Конечно, если вы знаете английский, то
изучение LaTeX пройдет более гладко, потому что многие команды, которые
используются там - это английские слова. Но, если вы не можете читать по-английски,
то, значит, эти слова будут
для вас новыми. Кроме того, если вы читаете по-английски, то вы всегда можете
обратиться к документации, которую написали
разработчики как LaTeX так и пакетов, которые вы подключаете для
работы. Ссылка, которая идет третьим пунктом
в этом списке - это tex.stackexchange.com,
это огромный форум на котором тысячи пользователей
LaTeX помогают друг другу решать те или иные задачи. В том числе, там много новичков, и если вы
чувствуете себя комфортно в том, чтобы писать по-английски, то вы
всегда можете зайти туда и задать свой вопрос. Кроме того, если вы попробуете
ввести формулировку задачи, которую вы хотите решить с помощью
Latex в Google, то, скорее всего, найдется кто-то, кто уже решал эту
задачу и опубликовал свое решение или на этом же самом форуме
tex.stackexchange.com или где-нибудь еще. Итак, как устроено взаимодействие
пользователя с издательской системой? Во-первых, как я говорил в прошлом видео,
то, что делаете непосредственно вы - это
редактируете исходный код. Ваше взаимодействие с системой будет
проходить в каком-то текстовом редакторе, в прошлый раз я сказал, что это
может быть даже Блокнот, но, конечно, Блокнот не
является самой удобной программой, потому что она разработана
для других целей. Есть множество редакторов, разработанных
специально для того, чтобы взаимодействовать с системой
LaTeX. В том числе, одно из их преимуществ — это то,
что в них есть разные кнопки, которые помогают, не вспоминая специальные
команды, просто нажимать на эти кнопки и использовать те, или иные
функции. Среди этих редакторов, вот я здесь
перечисляю - TeXStudio, TeXShop, WinEdt. Это очень хорошие программы, есть и другие
очень хорошие программы. Все они устроены примерно одинаково. В следующий раз я покажу вам, как
работать с одной из них. Когда вы введете свой исходный код,
вы должны скормить его системе, она должна прочитать его, обработать, и если у нее получится, создать исходный
документ. Создать выходной документ. Эта процедура называется компиляция. Компиляция - это процесс чтения вашего
исходного кода и его обработка. к сожалению, иногда, когда вы пишете свой
документ, система LaTeX не может понять что-то из того, что
вы написали. Может быть, вы ошиблись, может быть, вы недостаточно ясно выразились для
этой системы. Но, в этом случае, она будет ругаться, и скажет вам, что у нее что-то не
получилось. Это значит, что процесс
компиляции не приведет сразу к тому, что вы окажетесь в PDF, что вы сможете
увидеть ваш конечный документ, а приведет к
каким-то ошибкам. Эти ошибки написаны простым английским
языком, если вы не понимаете английский
язык, то вы можете обратиться к тому же самому
пособию Львовского, которое я упоминал. Там есть список этих ошибок с
расшифровкой, что каждая из них означает. И, кроме того, об этих ошибках
очень много информации в интернете. Эти ошибки вам придется исправить, то
есть если вы столкнетесь с тем, что система не может построить PDF-файл, то вам придется
вернуться в исходный код, и разобраться, где что-то пошло не
так. Повторять эту процедуру до тех пор, пока
все ошибки не будут устранены. Когда они будут устранены, у вас будет
итоговый документ PDF. Системы, которые отвечают за компиляцию, существуют разные. Во-первых,
есть такая система, которая называется
TeXLive, это, наверное, самый популярный
дистрибутив LaTeXa, и наверное, потому что он существует для
всех популярных операционных систем, как для Windows, так и для Mackintosh, так
и для Linux. Я рекомендую использовать его, на какой бы
системе вы ни были. Если у вас Mac, то TeXLive, будет в общем-то единственной системой, которую
можно использовать. И она поставляется в комплекте, который
называется MacTeX, просто введите в Google MacTeX,
и скачайте дистрибутив, который там будет по
ссылке, и у вас будет уже сразу работающая
система. Если у вас Windows или если у вас Linux,
то у вас могут быть некоторые проблемы с установкой, конечно же, как
обычно и вам потребуется делать какие-то
дополнительные действия. В материалах курса вы найдете краткую
инструкцию по установке дистрибутива для
разных операционных систем. Кроме того, существует такой дистрибутив
MikTeX, который сделан для Windows, тоже достаточно
популярный, однако, у меня с использованием его возникали
некоторые проблемы, поэтому с некоторых пор, я
предпочитаю TeXLive. Когда у вас будет гоовый PDF, то, конечно,
вы сможете открыть его какой-нибудь обычной программой для
просмотра PDF, например, Preview или Acrobat Reader. Зачастую, вместе с текстовыми редакторами, предназначенными специально для LaTeX,
идут специальные программы для просмотра PDF, они
отличаются от обычного Acrobat Reader тем, что вы можете щелкнуть правой
кнопкой на какое-то место в PDF-файле, и вернуться в исходный TeX-документ, в
исходный код, туда, куда вы щелкнули. То есть, увидеть в исходном коде то место,
которое вы выбрали в PDF. Совсем недавно появились несколько хороших сайтов, которые позволяют
проводить все эти процессы онлайн, то есть без
установки программы на компьютер. У такого подхода есть свои преимущества и
недостатки: с одной стороны, вы не можете получить к
ним доступ, если у вас нет интернета, то есть, вы не можете
отредактировать свою презентацию, пока летите в самолете,
чтобы ее представлять. Для этого вам нужно, чтобы у вас на компьютере, был установлен какой-то
движок для обработки LaTeX-документов. С другой стороны, у этих сайтов есть
также и достоинства. Вы всегда можете открыть их в любом
браузере, с любого компьютера, где есть доступ к интернету, и
получить доступ к своим документам. Я знаю два таких сайта, точнее, я
знаю три таких сайта, и два из них я рекомендую - это
WriteLaTeX и ShareLaTeX. Здесь - вы можете видеть в этой
схеме - что они позволяют сделать весь комплект действий, который
вам нужно, чтобы получить готовый
PDF-документ. На этом слайде вы видите структуру
типичного TeX-файла, то есть, того исходного кода, который вы будете писать, чтобы в итоге получился красивый
PDF-документ. Каждый файл, который вы будете делать,
начинается с команды \documentclass. Класс документа, если переводить
дословно. Вы можете видеть, обратный слэш перед
началом команды - это признак того, что вы говорите LaTeX: слово, которое идет
после обратного слэша, нужно воспринимать как
команду к действию. И команда \documentclass говорит
LaTeX о том, что вы начинаете писать документ для него, и также говорит, что
именно за документ вы собираетесь писать. Вот здесь вот, у команды \documentclass
есть два аргумента, то есть, вы не просто говорите
LaTeX, что вы хотите создать документ, но вы, во-первых,
говорите, что это за документ, в моем случае, это документ
класса article - статья. А, во-вторых, говорите сразу некоторые
атрибуты текста, которые вы хотите, чтобы в этом документе
были. Во-первых, вы хотите, чтобы документ был
на бумаге формата А4, во-вторых, вы хотите, чтобы в этом документе,
основной кегль шрифта был 12 пунктов. Скорее всего, если не написать команду про
бумагу А4, то все равно, TeX-документ будет в
формате бумаги А4. Это зависит от глобальных настроек,
которые есть в вашем дистрибутиве LaTeX. Однако, в некоторых странах популярен другой
формат, letter, который меняет некоторые другие
размеры и если вдруг, в вашем дистрибутиве, будет случайно установлен он, и вы создадите
PDF-документ в формате letter, то, может, вы ничего не заметите, но некоторые принтеры будут
ругаться, и вывод на принтер будет не совсем такой,
как вы видите на экране. Потому что размер бумаги не совпадет. Поэтому я рекомендую, на всякий случай,
писать здесь a4paper, чтобы удостовериться,
что будет нужный формат бумаги. После того, как вы задали класс документа,
вы можете написать какие-то команды, cлужебные, которые скажут LaTeX,
какими еще свойствами должен обладать
этот документ. Вот здесь отведено место для них. Ну, конечно, написанные русские буквы - это
не команды, это просто инструкция для нас с вами, чтобы
помнить, что здесь писать. Обратите внимание, что строчка начинается
со знака процент, и вот тут тоже есть знак процент. Это означает, что начинается комментарий. В любой строке, где встречается знак
процент, все, что идет после этого знака до конца строки,
игнорируется LaTeX. Если вы когда-нибудь
программировали, то вы знаете, что это такое. Это очень удобно, когда вы хотите
написать в документе что-то, что для вас или для
ваших соавторов. Но вы не хотите, чтобы это оказалось в
итоговом PDF-документе. То есть это будет видеть только тот, кто
редактирует текст. Итак, мы написали какие-то
служебные команды, их к концу курса у нас накопится очень много, и преамбула будет отдельным файлом, на несколько
экранов. После того, как мы это сделали, мы можем, собственно, приступить к написанию
текста документа. Текст документа начинается с
команды \begin{document}, и заканчивается командой
\end{document}. Вообще, begin и end - это очень
распространенные команды в LaTeX. Очень часто, когда вам нужно создать какую-то отдельную логическую структуру,
например, вот здесь, это документ, или, скажем, какое-то уравнение, формулы или группу
формул. То она будет начинаться с команды Begin,
а заканчиваться командой End. В зависимости от того, что идет в фигурных
скобках, LaTeX будет воспринимать это как
объект специального класса. Когда вы создадите документ, то,
во-первых, то, как он будет выглядеть, будет зависеть от класса,
который вы определили в самом начале. На прошлом слайде у меня был класс
article. Во-вторых, то, как он будет выглядеть,
зависит от того, что, собственно, вы в нем
напишите. Существует много классов, помимо article,
которые можно использовать. Здесь я привел четыре, которые, возможно, вам
пригодятся в первую очередь. Ну, article - это самый популярный формат,
который я вам рекомендую для большинства документов,
с которыми вы можете столкнуться. Это простейший формат, в котором, во-первых, поля на всех страницах
одинаковые. Что это значит? Если вы откроете хорошо изданную книжку,
то вы увидите, что на каждой странице поля, которые на внешней стороне,
отличаются по ширине от полей, которые на внутренней. Соответственно, на четных и нечетных
страницах, поля разные. Вот, класс article, по умолчанию, не
делает такого, то есть, там на всех страницах,
поля одинаковые. В отличие от класса book. Если вы хотите сделать книжку, то класс book - это хорошая идея, чтобы
использовать. В этом классе, вы сможете больше
себе позволить. То есть вы сможете сделать там какие-то большие разделы, главы, и там
будут специальным образом оформленные
колонтитулы, где будут автоматически подставляться фамилия автора и заглавие
этой книги. И там будут автоматически, правильным
образом, оформляться поля. То есть, поля на нечетных страницах
будут отличаться от полей на четных. Еще класс, на который я хотел бы
обратить внимание, - это класс beamer. Beamer - это то, чем мы будем заниматься в самом конце, на последней неделе нашего
курса. Он нужен для создания слайдов презентаций. Внутри документа вы скорее всего захотите создать какую-то
логическую структуру. То есть разделить его на главы,
параграфы, разделы и так далее. LaTeX, как я в прошлый раз говорил,
очень хорош во всем, что касается работы со
структурой документа. И он позволяет, во многом, этот процесс
автоматизировать. То есть, вы пишите специальные команды, а
дальше система сама заботится о том, как нужно оформить то,
что вы написали. Самая большая, самая главная
единица структурная в документах LaTeX, это часть, part.
Внутри части, то есть, ну представьте себе, что вы
пишите книгу, и там есть часть один, и часть два. То есть это как бы тома книги. Внутри части есть глава, то есть
следующая структурная единица - это глава. Она есть в классах book и report. То есть если вы находитесь в
классе article, статья, то там подразумевается, что глав не
может быть. Там начинается все с разделов. Это, скорее всего, сделано не
случайно, потому что часто так бывает, что книгу, главы книги
делают из статей. И заботливые создатели LaTeX
сделали так, чтобы автор сам себе не навредил. То есть вы делаете статью, в статье
главная единица - это section, и если вы потом хотите
объединить несколько статей в главы, то просто поднимаетесь на
уровень вверх, каждой статье назначаете свою главу, и у
вас получается книга. Section - это можно перевести как раздел
или параграф. Subsection - это следующий элемент
структуры, подраздел. Есть даже subsubsection - подподраздел. Ну и еще две единицы - paragraph и
subparagraph, которые означают абзацы. Это слово - ложный друг
переводчика. Слово paragraph не нужно переводить как параграф, по-русски параграф - это
section. Одна из особенностей, которая упрощает
работу с LaTeX - это перекрестные ссылки. Вы можете поставить ссылку на любой объект в вашем документе, у которого есть
какой-то счетчик. То есть, если что-то в документе нумеруется, например, главы, параграфы,
уравнения, рисунки, таблицы, то вы можете поставить на него ссылку, так, что эта ссылка будет сформирована
автоматически. Что я имею ввиду: скажем, есть у вас
какое-нибудь уравнение, рядом с этим уравнением, или там может быть
название главы, или рисунка, таблицы. Рядом с этим уравнением вы можете
написать специальную команду \label, у команды \label один аргумент в
фигурных скобках. Это имя этой команды. То есть вы можете, там,
например, если вы хотите ссылаться на разделы, то
удобно писать \label, дальше sec от слова section
это необязательно, но это поможет вам
логически организовать эти ссылки. Ну, и название какое-то, понятное вам, этой
главы. Скажем, ссылка на теорему Пифагора, могла
бы выглядеть так, точнее, не ссылка, а метка у теоремы Пифагора могла бы выглядеть так,
\label, дальше th от слова теорема, и название этой
теоремы. Вы можете, если вы еще делаете не окончательную версию документа, а
какой-то черновик для того, чтобы его напечатать, и посмотреть
как он выглядит, то с помощью подключения
специального пакета showkeys, вы можете прямо
рядом со всеми этими теоремами, разделами,
таблицами, на которые вы ссылаетесь, прямо рядом с ними
увидеть, что у той или иной таблицы стоит метка. Иногда, это помогает уже при окончательной
правке документа проверить, что все ссылки стоят
корректно. Когда вы расставили эти метки, дальше вы
можете упоминать их в тексте. Вы можете написать где-то в тексте команду
\ref с одним аргументом в фигурных скобках, который вы возьмете из соответствующего
\label, на который вы хотите сослаться. И вместо того, чтобы показать вот
это, то есть, показать сам \ref{name} в
PDF-документе будет номер этого объекта. Скажем, если вы ссылаетесь на теорему,
которая получила номер три точка два, то вместо \ref{name} будет
написано три точка два. Вы также можете написать команду \pageref,
и там подставится номер страницы, на котором
окажется объект, на который вы ссылаетесь. Естественно, этот номер будет рассчитан
автоматически. Если вы переделаете весь документ, и
номера страницы изменятся, то изменятся автоматически и номера страниц, которые отображаются с помощью этих
ссылок. Ну, и есть специальная команда, чтобы
ссылаться на уравнение, чуть позже, в следующем видео, я покажу, почему именно с
ней, именно ее нужно использовать. Также есть некоторые специальные пакеты, которые совершенствуют работу с этими
ссылками. Скажем, есть такой пакет
varioref, который позволяет делать более хитрые ссылки,
чем просто \pageref. Скажем, вы хотите написать уравнение три
точка два на странице 18, но если эта ссылка сама окажется на странице 18, то есть она недалеко от уравнения, то это будет
выглядеть глупо. Вы ссылаетесь на страницу, на которой
прямо сейчас находитесь,
пользователю не нужно ничего перелистывать. Так вот, пакет в varioref позволит вам
сделать так, что эти ссылки автоматически будут заменяться на
что-нибудь типа "на этой странице", или "на следующей
странице". И эти ссылки будут гораздо более
интеллектуально выглядеть. Если вы подключите пакет hypperref -
гипперссылки, что мы научимся делать позже, то в вашем PDF, можно будет нажимать мышкой на
соответствующие номера, то есть если вам где-то, где-то
встретилась такая фраза, как: теорема три точка
два, то вы можете нажать на эту фразу, и оказаться там, где эта теорема, то есть,
ваш просмотрщик, программа просмотрщик PDF,
автоматически перенесет вас туда, куда нужно. Итак, мы готовы к тому, чтобы начать
работать непосредственно с LaTeX и создать наш
первый документ. Во-первых, я хотел бы
сказать, что один их двух сайтов, которые я упоминал раньше,
которые нужны для компиляции, WriteLaTeX и ShareLaTeX,
основатели одного из этих двух сайтов, а именно WriteLaTeX, любезно согласились технически подерживать
наш курс. И поэтому материалы, которые
я буду для вас размещать, в основном, будут
поставляться через этот сайт. Это чрезвычайно удобно, потому что так, вы
сможете непосредственно открывать их и работать с ними сразу же,
не скачивая их на компьютер, не устанавливая
ничего. Так вы сможете познакомиться с LaTeX очень
быстро - прямо сейчас. Если вам понравится этот сайт, если вы
захотите работать с LaTeX, и вы захотите на нем зарегистрироваться,
вообще-то, он доступен и без регистрации, но, если вы захотите зарегистрироваться, я
прошу вас использовать вот эту ссылку — так мы сможем смотреть, кто пришел с
нашего курса на этот сайт. И, кроме того, если вы будете
регистрироваться по этой ссылке, то вы получите дополнительные бесплатные 50
Мегабайт для хранения ваших документов на этом сайте. Итак, давайте создадим наш первый
LaTeX-документ. Перейдите по ссылке, которая здесь в
первой строчке.1.1.3
Мы оказались на сайте WriteLaTeX.com,
перейдя по ссылке из презентации. Обратите внимание, как устроен этот сайт:
во-первых, адрес страницы, на которую мы попали, у вас он будет не таким, как у
меня. Потому что каждый раз, когда кто-то
переходит по ссылке на шаблон, этот адрес создается
уникальным образом. И это ваш личный адрес этого документа, вы можете редактировать его, он будет
сохраняться у вас, и каждый раз, когда вы будете открывать эту
ссылку, вы будете попадать туда, где в прошлый раз
остановились. Если вы хотите, чтобы кто-то присоединился
к редактированию этого документа, какой-нибудь ваш соавтор,
просто отправьте ему эту ссылку. В левой части экрана - большое белое поле, предназначенное для редактирования
исходного текста. В правой части - то, как документ будет
выглядеть, когда станет PDF. Здесь есть несколько кнопок вверху, вот,
можно зайти, посмотреть, какие файлы есть в проекте - пока в нем только
один файл. Главный файл - main.tex. Версии: если вы зайдете на сайт,
зарегистрировавшись под своим логином и паролем, то вы сможете в любой момент сохранить версию документа и
продолжать редактирование, а потом в любой момент вернуться к любой из
сохраненных версий. Share - вы можете поделиться одним из двух
способов: или вы можете поделиться с вашими соавторами ссылкой, которая доступна для
редактирования, или вы можете поделиться с кем-то
правами только для чтения. Можно скачать PDF-документ, нажав на
следующую кнопку, или опубликовать в интернете с помощью средств,
которые здесь представлены. Итак, давайте посмотрим, что за документ
перед нами. Вначале, в левой части экрана, в исходном тексте, здесь подсвеченный
голубым цветом текст, - это комментарии, они начинаются со
знака процента, как вы помните из предыдущего
видео: все, что начинается со знака процента,
игнорируется LaTeX до конца строки. Первое, с чего начинается документ, это команда \documentclass. Здесь я
поставил \documentclass{article} и два атрибута:
это формат бумаги А4 и 12-й размер шрифта. Дальше идут некоторые команды, некоторые
заклинания, которые нужно обязательно произнести, чтобы документ
корректно работал с русским языком. Если вы станете профессионалом в LaTeX, то
вы обязательно разберетесь, что это за команды - сейчас давайте не будем
тратить время на эти подробности. После этого идет несколько команд, посвященных исходным данным этого
документа: автор, заглавие и дата. Когда вы напишете их здесь, то, само собой,
в конечном файле ничего не появится - для этого нужно будет написать еще одну команду ниже - здесь просто задаются эти
атрибуты. То есть вы присваиваете некоторые
значения этим переменным, чтобы дальше можно было их
использовать. Они автоматически подставятся на титульный
лист, если нужно - в колонтитул, и еще куда-нибудь в документе,
куда вы скажете. Все это была преамбула, то есть,
все, что написано до следующей строчки
\begin{document}, не попадает в конечный текст, само собой, а
только задает какие-то свойства файла, который мы
сейчас будем создавать. Итак, \begin{document} - наконец-то
начинается сам текст документа. Первая команда, которая идет здесь, - это
команда \maketitle. Команда \maketitle выведет в
PDF-документ те исходные данные про автора, заглавие и дату,
которые вы ввели выше. Кстати, дату можно было не вводить. Если не вводить дату, то там автоматически
подставится сегодняшнее число. Вот, вы можете видеть в правой
части экрана, как появилось заглавие, имя автора и дата -
третье февраля. Дальше можно писать что-нибудь, вот я
написал здесь: "Привет, мир!" И это появляется уже обычным шрифтом, как
часть основного текста. Я могу написать еще что-нибудь. Вторая строчка. Обратите внимание, что,
чтобы начать новый абзац, мне нужно оставить пустую
строку. Через некоторое время, документ
обновляется в правой части. Если вы будете в дальнейшем работать с LaTeX на своем
домашнем компьютере, то там процесс будет
проходить быстрее. На этом сайте компиляция занимает чуть
больше времени. Итак, вторая строчка, третья строчка - это
все было вступление. Давайте создадим первый раздел документа. Это делается с помощью команды \section. Всякая команда начинается с обратного
слэша. Я пишу \section. У нее есть один обязательный аргумент в фигурных скобках, я назову его "Первый
раздел". Так, смотрим на правую часть, через некоторое
время она обновляется и мы видим там тоже
заголовок раздела - "первый раздел". Я могу написать тут что-нибудь: "текст
первого раздела". Неважно, в какой раскладке. Итак, можно создать раздел более
низкого уровня - \subsection, который автоматически получит
номер один точка один. Я назову его просто "подраздел". Давайте попробуем сделать ссылку
внутри документа на наш первый раздел. Например, назовем его, с помощью команды
\label, назовем его "razdel". Неважно, как его называть. Можете придумать любое имя для своего
первого раздела. А теперь напишем здесь: "В первом" - нет, в
первом даже не нужно писать - "В разделе \ref" - и дальше имя метки - "начинается документ". Сейчас документ обновится в правой
части, и вы видите, что вместо того что я написал \ref{razdel},
подставился его номер автоматически. Можно создать такую же метку для
подраздела. Давайте я напишу \label какой-нибудь из
случайных букв. И напишу: "Это подраздел" - опять же, ссылка, и имя, присвоенное
подразделу. Через некоторое время документ
обновляется, и номер подраздела один точка один
подставляется автоматически. Мы с вами сделали наш первый документ в
системе LaTeX. Пока он довольно примитивный, но это
первый шаг, из которого дальше мы сможем получить все более и
более серьезные, навороченные документы. В дальнейшем все шаблоны
следующих занятий будут размещаться на этом сайте WriteLaTeX, а также для
скачивания на странице курса в Курсере. Сейчас я установлю на свой
компьютер программу MacTeX, в состав которой входит дистрибутив TeXLive, а
также программу TeXStudio. И буду работать в ней, потому что
компиляция проходит быстрее. Если у вас есть возможность работать
в LaTeX на локальном компьютере, то так и
делайте. Если вам нужно что-то подредактировать с
чужого компьютера, то иногда бывает удобно зайти и сделать это
через сайт.1.2.1
В этом видеофрагменте мы рассмотрим, как создавать в LaTeX простые математические
формулы. Вы можете скачать из
материалов курса шаблон 1.2. Вот у меня он открыт на компьютере,
я открыл его в программе TeXstudio. Это программа, которую вы можете
установить к себе на Mac, или на Windows, или на Linux, - она есть для всех этих
операционных систем, - и работать в ней. Если у вас есть такая
возможность, то лучше так и сделать, потому что тогда у вас будет
доступ к редактированию ваших документов, их компиляции, независимо от того, есть у
вас сейчас интернет или нет, и насколько хорошо работают сайты для онлайн-редактирования этих документов, о
которых я говорил. Итак, вот документ, шаблон 1.2. Начало уже привычное нам, такое же, как и
в прошлый раз. Здесь есть какой-то вступительный текст,
который полностью представляет собой комментарий, то есть не
воспринимается системой. Дальше идет команда \documentclass,
которая задает класс документа, такой же, как и в прошлый раз. Опять это класс article, опять он с
опциями бумага А4 и 12 пунктов. Те же самые пакеты, что в прошлый раз
подключены для работы с русским языком, но один
только добавлен. Это пакет mathtext, который отвечает за то, чтобы русские буквы в формулах
отображались. То есть если вам почему-то захочется использовать в качестве переменных не
латинские или греческие буквы, а русские, то вот подключение пакета mathtext сделает
это возможным. Я, однако, не советую это делать, то есть
использовать это только в крайнем случае, потому что,
во-первых, вдруг вам захочется, там, послать или перевести эту, написанную
вами, написанный вами документ на какой-нибудь другой язык, и русские
буквы будут очень непривычны читателю. Во-вторых, пакет mathtext, поскольку он
неродной для LaTeX, то есть изначально не предполагалось, что
кириллические буквы могут использоваться в формулах, иногда он вызывает проблемы в работе, то
есть подключение некоторых других пакетов может стать невозможным, если вы используете пакет
mathtext. Поэтому я здесь его подключаю, во всех
дальнейших документах, которые я буду предлагать вам,
его не будет. Итак, что здесь еще есть в
преамбуле? Здесь подключен целый ряд пакетов,
многие из которых начинаются с ams. AMS - это американское математическое
общество, организация, которая внесла очень большой вклад в
развитие LaTeX и написала вот эти пакеты, которые сейчас,
в общем, стали стандартными и одними из
самых часто используемых. Я не буду вдаваться в подробности,
что каждый из них означает. Если хотите, вы можете легко найти эту
информацию. Но многие из тех команд, которые я сегодня буду показывать, они
существуют благодаря этим пакетам, то есть если не подключить их, то система будет ругаться на
неизвестные команды. Поэтому я советую вам иметь эту строчку
всегда в своей преамбуле. Она ничего плохого в себе не несет,
это стандартные пакеты, которые ни с чем не конфликтуют и
очень хорошо работают. Еще один пакет, который здесь подключен,
это пакет icomma, это intelligent comma, умная
запятая. Я позже скажу о том, как она работает и
почему она нам нужна. Так, здесь есть, видите, два
пакета, которые можно подключить, - вернее один пакет и одна
опция, которую можно подключить, - но пока они у
меня начинаются со знака процента, то есть они
не подключены. Дальше я скажу, как их подключение
повлияет на обработку документа. Следующие два пакета ~ это шрифт Евклид,
euscript и еще один математический шрифт для…
иногда, если латинские и греческие буквы заканчиваются, то
хочется использовать их же, но написанных другими шрифтами всякими,
там, курсивными или готическими. Вот эти пакеты позволяют это сделать. Так, здесь есть еще кое-что, что я, - вот
это вот, - что я пока не буду обсуждать. Дальше, когда мы столкнемся с
использованием, я вернусь к преамбуле и расскажу, зачем это было
нужно. Заголовок уже привычным нам способом
сделан, здесь есть автор, заглавие и дата. Хорошо. Теперь, если мы запустим этот документ - в программе TeXstudio это делается
нажатием клавиши F1 на клавиатуре или нажатием вот этих, вот
этой вот двойной стрелочки, вот она здесь. Он запускается на обработку. Вот здесь внизу, вот здесь вот внизу мы видим сообщение, которое LaTeX, может
быть, хочет нам передать. Сейчас, к счастью, все хорошо,
процесс закончился нормально, это означает, что выполнение документа не
привело ни к каким ошибкам. Ну еще бы, мы практически ничего не
сделали, то есть подключены несколько основных пакетов и просто введена команда, которая отвечает за
заголовок. Кстати, отвлекаясь на секунду от этого
документа, я хочу вам показать, во что превратилась папка, в
которой этот документ был. Вот main1.2.tex ~ это файл, который был
единственным в этой папке еще несколько минут
назад. Это тот файл, который вы скачаете с сайта
из материалов курса как шаблон 1.2. Когда я запустил документ на обработку с помощью LaTeX, создалось несколько
других документов. Ну, самый важный из них ~ это вот этот,
PDF, его можно открыть, и он откроется в
обычной программе просмотра PDF. Пока он пустой, очень, очень хорошо
это видно. Это документ, который точно вам
понадобится. Остальные файлы, которые здесь ~ это
служебные файлы, которые LaTeX сделал для своих
нужд. Здесь их еще совсем немного. Если вы будете делать презентацию, или картинки вставлять, или рисовать картинки
сами, или делать оглавление, список литературы,
то файлов этих здесь может быть больше
десятка. Ну, здесь вот файл log ~ это файл, в котором записано все-все-все, что
происходило во время компиляции. Это написано на специальном языке, если вы когда-нибудь станете продвинутым
пользователем, то, может быть, вам будет интересно изучить эти
файлы, особенно если происходят какие-то
непонятные вам ошибки. Файл aux, auxiliary, создан LaTeX для того, чтобы быть картой документа, то
есть если в вашем документе есть какие-то перекрестные ссылки или нужно
помнить номера страниц, на которых находятся какие-то объекты, то файл aux содержит эти сведения. Файл synctex позволяет, - то, о чем я
говорил в прош… в прошлом видео, - позволяет
в каком-нибудь месте получившегося PDF-документа, вот в этой
программе просмотрщика, нажать правую кнопку и перейти в место, которое ему
соответствует в исходном документе. Позже мы попробуем это сделать. Эти файлы, ну кроме, естественно,
исходного файла TeX, который вы редактируете, и файла PDF вы можете
смело удалить. Они не пригодятся вам, если вы уже
сделали итоговый файл. Но учтите, что LaTeX будет создавать их заново при каждой компиляции, и
если у вас нет причин удалять их, то можете
оставить, потому что они все равно будут, и вы никуда не денетесь от того, что
они будут захламлять вашу папку. То есть если вы хотите отправить кому-то
содержимое документа, то эти файлы отправлять ни к
чему. Но если они вам не мешают, то оставьте,
потому что LaTeX будет использовать их при последующих компиляциях, особенно
файл aux, и последующие компиляции будут
проходить быстрее. Иногда бывает так, что устаревший
файл aux, который LaTeX использует, а надо бы его не
использовать, а сделать новый, вызывает какие-то
проблемы, то есть, например, ссылки не обновляются или еще какие-то
неожиданные вещи происходят. То есть если вы уверены, что в вашем
документе все хорошо, но тем не менее он компилируется как-то не так или вообще
не компилируется и вызывает ошибки, то
попробуйте сделать следующее. Ну, просто, можно в папке вручную удалить
эти файлы или вот здесь в меню этой программы TeXstudio в
разделе "Инструменты" есть такой пункт "Очистить
вспомогательные файлы". Если я нажму его, ну он меня спросит,
действительно ли я хочу это сделать, OK. Удалены все файлы кроме .tex, .pdf ну и
.synctex, почему-то TeXstudio его не удаляет, если он вам мешает, вы
можете удалить его вручную. Вот. И теперь при следующей компиляции все эти
файлы будут созданы заново, то есть LaTeX будет
воспринимать этот документ, как тот, который он видит в первый раз, и не будет пользоваться никакими
результатами, которые получил при предыдущих
компиляциях. Итак, давайте начнем заниматься
математикой. Во-первых, что важно знать? В LaTeX всегда неважно, сколько
пустых строк вы оставите между абзацами. Вот скажем, я хочу написать здесь "Первый",
так, "Первый абзац". Если я просто нажму, нажму Enter и начну здесь писать, скажем, "Второй абзац",
то, после того, как я запущу это на обработку, на
самом деле второго абзаца не получилось, то есть
фраза "Второй абзац" оказалась там же, где и
первый. Секрет в том, что LaTeX не достаточно одного переноса строки, чтобы начать новый
абзац. Когда вы будете работать с большими документами, вы поймете, что это очень
удобно. Вы можете внутри какого-нибудь большого
абзаца, если вы хотите не делить его в итоговом документе на части, но для себя
логически разделить, чтобы понять, что в нем написано, и, может быть, как-то
переформулировать, то иногда это удобно нажимать один раз Enter, чтобы, например, каждое предложение начиналось с
новой строки. Но Enter, нажатый один раз, воспринимается
просто как пробел. Поэтому нового абзаца не получается. Чтобы новый абзац получился, нужно
оставить по крайней мере одну пустую строку. Можно видеть, что теперь, действительно,
абзац превратился в абзац. Можно оставить несколько пустых строк, это
неважно. LaTeX не оставит пустое место между первым
и вторым абзацем, если вы оставите там много пустых строк,
потому что LaTeX понимает, что, скорее всего, вы это сделали, чтобы,
там, вставить что-нибудь потом между ними, а не потому, что вы хотите
большой вертикальный пробел. Как делать вертикальные пробелы, мы дальше
узнаем, но точно не так, как вы это делаете в Word, нажимая
Enter многократно. Итак, у нас есть первый и второй абзац. То же самое, кстати, касается пробелов. Есть я поставлю много пробелов между
словами "первый" и "абзац", то это никак не отразится на
итоговом результате. LaTeX понимает, что, скорее всего, вы
поставили много пробелов по ошибке, и не нужно расширять промежуток
между словами. Если вам нужно расширить промежуток между
словами, то есть специальная команда горизонтального пробела, которую
мы в одном из следующих занятий рассмотрим. Чтобы написать формулу, нужно вставить ее
между знаками доллара. Я могу написать: "$2 + 2 = 4$. Вы можете видеть, что TeXstudio,
программа, в которой мы работаем, подсветила все, что между
долларами, зеленым. И сами доллары тоже. Это значит, что мы перешли в
математический режим и пишем формулу, а не текст. Внутри формулы можно поставить пробелы
между символами, если хотите. Любое количество пробелов. Это неважно, LaTeX будет их всех
игнорировать. Он будет сам расставлять пробелы,
горизонтальные, вертикальные промежутки между знаками так, как считает
правильным. И, в очень большом числе случаев, это
действительно так и должно быть. То есть стоит доверить ему эту расстановку. Если я запущу это на обработку, то я увижу
формулу в своем документе PDF. Вот здесь написано "2 + 2 = 4". И вы видите, что несмотря на то, что здесь
расставлено много случайных пробелов, в исходном
тексте, в итоговом тексте все хорошо. Итак, 2 + 2 = 4. Вот, формула, написанная внутри одних
долларов, воспринимается как слово. То есть я могу просто продолжать абзац. То есть, вот, например, "Второй абзац", в
нем встретилась эта формула. После нее, я могу, например, поставить
точку и продолжать писать свой текст. Текст абзаца. Эта формула просто окажется как формула
внутри строки. Вот так. Иногда с этим связаны некоторые проблемы. Например, если формула оказалась слишком
длинной и не входит в строку. То есть, или вам нужно перенести строку, и
это какое-то неудачное место в формуле. Или, может быть, формула не такая простая,
представляет собой не просто ряд символов горизонтальный а,
например, содержит дроби или интегралы. То есть какие-то символы, которые выше,
чем сама строка. В этих случаях вы захотите сделать формулу
выключной. Это такой термин, которым обозначаются объекты, которым предназначается отдельная
строка. Если я хочу сделать выключную формулу, то
есть формулу, которая будет на отдельной
строке, будет выровнена посередине, то, вместо знака долларов, мне нужно
использовать команду, которая состоит из обратного слэша и
открывающейся квадратной скобки. Я набрал только обратный слэш и
открывающуюся квадратную скобку. Команду, которая закрывает математический
режим, то есть обратный слэш и закрывающуюся
квадратную скобку, LaTeX, не LaTeX, точнее, а TeXstudio, программа, в которой мы работаем,
поставила автоматически. Это довольно удобно. Если вам это не нравится, вы можете
отключить это в настройках. Что будет, если я сейчас здесь напишу
формулу 2 + 2 = 4 и запущу это на обработку? Можно видеть, что эта формула получила отдельную строку и стала выровнена
посередине. Давайте попробуем выключить пакет icomma и
посмотреть, что будет, если бы мы его не использовали. Я оставлю знак процента. Это значит, LaTeX будет игнорировать
строчку с пакетом icomma. Вернемся сюда, и я напишу формулу, то
есть, внутри знаков доллара, обычную, внутри строчки, формулу, в которой будет
десятичная дробь две целых четыре десятых. 2,4. Запущу это на обработку. Я увижу результат. Результат этот, конечно, выглядит
удовлетворительно, но не отлично, потому что между запятой и четверкой
оказался ненужный пробел. Этот пробел появился там потому, что LaTeX подумал, что я просто перечисляю какие-то,
например, координаты. То есть, если у точки есть две координаты,
2 и 4, то это два разных числа, 2 однородных члена предложения, которые нужно разделить
запятой и пробелом. Однако в нашем случае это не так. Если это десятичная дробь, то не нужно
разделять их пробелом. Поэтому я включу пакет icomma, который
сделает вот что. Сейчас, если включить пакет icomma и
запустить на обработку, то мы видим, что пробел между двойкой и
четверкой исчез. То есть теперь это выглядит как нормальная
десятичная дробь. Но это, это не было бы умной запятой,
icomma, intelligent comma, если бы на этом
заканчивалось действие этого пакета. Этот пакет умеет вот что. Что, если мне действительно нужно
перечисление. Скажем, я хочу написать координаты точки с
координатами 2 и 4. Я могу сделать это вот так. Смотрите, чем отличается запись первая
десятичной дроби от записи точки с двумя
координатами. Тут я на самом деле поставил пробел. То есть это единственный случай, когда
пробел внутри формулы имеет значение. Во всех остальных случаях пробелы в
формулах полностью игнорируются LaTeX, но если вы
подключаете пакет icomma, то пробелы после запятой не игнорируются, и нужно быть внимательным
при наборе. Если вы написали 2,4 без пробела в исходном тексте, то, значит, это
десятичная дробь. Если вы написали 2,4 с пробелом в исходном
тексте, значит это перечисление однородных членов
предложения, и пробел окажется в PDF-документе. Давайте убедимся в этом, запустив на
обработку. Вот, можно увидеть, что результат разный. То есть 2,4 в первом случае и 2, 4 во
втором случае по-разному обработаны. То есть там, где это десятичная дробь,
пробела нет; там, где это перечисление, пробел есть. Иногда так случается, что формулы, которые
мы набираем внутри строки, попадают туда, где
строка разрывается. То есть начало формулы оказывается в
одной строке, а конец - уже в следующей. Традиции русскоязычного набора, как и,
наверное, любого другого набора, не запрещают делать так с
формулами. В этом нет ничего страшного. Но традиции русскоязычного набора немножко
отличаются от традиций, принятых в других местах. Давайте я покажу, чем заключается это
отличие. Ну, во-первых, мне нужна какая-нибудь
длинная строчка со случайным набором букв. Просто я хочу, чтобы формула, которую я
сейчас наберу, оказалась в конце строки. Скажем, в этой формуле я напишу, что 1 + 2
+ 3 + 4 + 5 + 6, так, равно, кажется, 21. Давайте посмотрим, где окажется эта
формула, если я ее обработаю. Да, она оказалась не там, где я хотел, потому что она полностью влезла в
строку. Ну хорошо, давайте добавим сюда еще слов. А теперь она вся перенеслась. Это мне тоже не нужно. Значит, слов слишком много. Во. Вот, то, что я хотел получить. Смотрите. Начало формулы оказалось в первой строке
этого абзаца, а окончание - в следующей строке этого
абзаца. Если бы мы писали книжку по-английски, то
то, что произошло, было бы правильным. То есть просто формула разорвалась,
оставив знак арифметического действия в предыдущей строке и начав новую строку
со следующего символа. Однако в русскоязычной традиции набора
математических формул принято переносить знак арифметического
действия на новую строку тоже. То есть дублировать его еще раз. Есть способ сделать это разумно с помощью
LaTeX. Ну, что можно было бы сделать, если бы мы хотели, вот, в порыве перфекционизма,
продублировать этот знак. Можно было бы здесь просто написать здесь
второй знак плюс, прямо в формуле. Запускаем. Так. И, в общем, произошло то, чего мы ожидали. То есть после единички плюс есть как в
первой строке, так и в следующей строке он тоже
оказался. Недостаток такого подхода в том, что если
мы что-нибудь поменяем в тексте, который идет
перед формулой и разрыв окажется в другом месте, то эти два
плюса подряд будут идти там, где их быть не
должно. Существует способ, предложенный в пособии Львовского, которое является нашей
основной книжкой. Способ этот заключается в том, чтобы
задать вот такую команду. В преамбуле это называется "Перенос знаков
в формулах по Львовскому". Я не буду вдаваться в подробности, что
именно здесь происходит. А-а. И если вы еще не стали продвинутым
пользователем, не советую вам разбираться. Просто научитесь работать с этим. Смотрите. Когда я узнал, что у меня знак плюс после
единички оказывается в конце строки и разрывает эту строку, то я могу поместить
этот плюс внутрь аргумента команды \hm. Вот так вот. Не нужно его дублировать, у меня остается
один плюс, но я помещаю его внутрь команды \hm. То, что происходит, - он продублировался
здесь. Но давайте посмотрим, что было бы, если бы
мне не нужно было дублировать. То есть, если бы формула, начало формулы,
не вошло в первую строку. Тогда этот плюс остается единственным, как
положено. То есть команда \hm дублирует знак тогда,
когда нужно, и не дублирует тогда, когда не
нужно. Очень удобно использовать такую
команду, чтобы разбираться с этими случаями, когда формула
разрывается между строками. Мы с вами раньше использовали вот в этом месте команду, которая делала
выключную формулу 2 + 2 = 4. Давайте сейчас сделаем так, чтобы эта формула была содержательным объектом в
тексте, то есть, чтобы она получила номер и чтобы
на нее можно было ссылаться. Для того чтобы это сделать, существует окружение, по-английски -
environment, - если вы будете читать какую-нибудь книжку, то это будет называться environment, -
\begin{equation}. Вот я начал набирать, и мне уже TeXstudio
подсказывает. Это очень хорошая программа, которая
позволяет мне до конца не писать это слово, я нажимаю Enter, и он уже сам \end тоже написал equation, то есть
мне осталось только написать, что за уравнение
у меня там будет. Ну давайте у меня там будет уравнение
скажем, MR = MC. Вот такое простое уравнение из
микроэкономики. Давайте я запущу это на обработку. Посмотрю, что вышло. Формула MR = MC оказалась выключной, она
получила собственную строку, выровнена посередине, получила отступы
сверху и снизу и получила номер, номер 1. Нумерация сквозная по умолчанию вдоль
всего документа. В одном из следующих уроков мы научимся
изменять это, то есть делать так, чтобы, например, уравнения
нумеровались как 1.1, где первая цифра ~ это номер секции, то есть номер раздела, и
нумерация уравнений может подчиняться какой-нибудь другой нумерации, например,
нумерации глав или разделов в вашей статье. Так, хорошо. Как мы с вами учились на прошлом занятии, можно этому объекту приписать
какой-то label. \label, вот мне TeXstudio подсказывает,
какой синтаксис у этой команды. Вместо key нужно написать имя, которое мы
ей присвоим. Ну давайте присвоим ей имя eq, это класс
equation, то есть тип equation, ну и что-нибудь типа там mrmc, чтобы долго
не запоминать, как мы его назвали. Теперь я могу воспользоваться этим. Я могу использовать команду \eqref,
пишу в следующем абзаце "\eqref". Вместо label нужно написать то, чему оно у нас… то, какое значение присвоено, то
есть "eq:mrmc". Я могу написать, что это условие
максимизации прибыли. Это действительно так. Давайте запустим это на обработку. Что произошло? У нас оказалось здесь, что единичка
подставилась сама собой, то есть тот именно номер,
который мы присвоили этому уравнению, не мы
точнее, а который система присвоила этому уравнению,
оказался в ссылке. Мы можем написать, что это не просто
1, а еще и на странице, на странице, - для указания страницы, как вы
помните, используется команда \pageref, - когда я ее ввел, мне TeXstudio уже само
предлагает выбрать нужную метку. У нас она всего одна, поэтому выбирать
даже не приходится. Я нажимаю Enter, оно само подставилось. Вот, если теперь запустить на обработку,
то мы увидим, что "1 на странице 1 ~ это условие
максимизации прибыли". Если это окажется на другой странице, то
будет, значит, какое-то другое число здесь вместо
единички.1.2.2
В прошлом видеофрагменте мы рассмотрели,
какие способы существуют, чтобы показать формулу в нашем
PDF-документе. Давайте теперь рассмотрим, как делать различные формулы, то есть какие
существуют команды для того, чтобы использовать распространенные математические знаки
 и действия. Давайте создадим для этого логический
раздел в нашем документе. Я пишу section, я продолжаю редактировать
тот же документ, который был в прошлом фрагменте и пишу здесь нюансы
работы с формулами. И подраздел первая часть, это дроби. Чтобы сделать простую дробь, существует
команда frac, от слова fraction. Вот, я могу сейчас обычную формулу внутри
строки, frac, Texstudio подсказывает мне, что должно
быть в числителе и в знаменателе. То есть, как написать числитель и
знаменатель - numerator и denominator. Я могу воспользоваться этой подсказкой и
заменить числитель, скажем, на три, а знаменатель
на шесть - очень простая команда, с двумя аргументами в фигурных скобках, числитель
и знаменатель. frac три шесть - это значит три
шестых, равно - это можно сократить и написать
ноль запятая пять. Как вы помните, здесь единственное
место, в котором важно не ставить пробел. То есть ноль запятая пять - это
десятичная дробь, значит, благодаря пакету icomma, мы можем избежать пробела
здесь, не ставя его в исходном тексте. Так, давайте, запустим это на обработку и
посмотрим, что получилось. Три шестых равно ноль пять. Ну, здесь три шестых выглядит
довольно неплохо, то есть, когда вы напечатаете эту бумагу
на принтере, несмотря на то, что документ на
принтере, несмотря на то, что цифры маленькие, вы
увидите их. Но, если у вас в этой дроби будет
что-то важное, то есть в числителе и знаменателе будут какие-то более сложные
выражения, чем просто отдельные цифры. Или, что еще хуже, в числителе и
знаменателе будут таке дроби, то есть, дробь будет
многоэтажная. То делать формулы именно так, плохая идея. Вы в данном случае, хотите скорее всего,
захотите сделать эту формулу выключной, то есть, я
перехожу в режим в режим выключных формул, с помощью
команды слэш, открывающаяся квадратная скобка и слэш,
закрывающаяся квадратная скобка. И запускаю снова на обработку. Посмотрим, что получается. Ага, вы видите, что формула теперь получила отдельную строку, выравнивание по
центру. И что для нас важно, тройка и шестерка
имеют нормальный размер. То, что мы находимся на отдельной
строке, позволяет LaTeX не сокращать размеры этих цифр, а ставить его
таким же, какой и размер остального текста, потому, что
если мы на отдельной строке, то это можно сделать без ущерба для
текста, который оказался вокруг. Не надо раздвигать строку и делать сверху,
снизу от нее большие пробелы. Они и так есть. Давайте, напишем что-нибудь здесь
более хитрое. Например, в числителе, вместо тройки можно
написать еще одну дробь. Например, вместо тройки, я могу написать
без ущерба для смысла, один плюс еще одна дробь, четыре, числитель и
два - знаменатель. Это останется верным равенством, я могу
запустить его на обработку и увидеть, что у меня
теперь трехэтажная дробь. Но, первый и второй этажи, четыре вторых,
оказались меньшего размера, то есть, рано или поздно
нужно начинать уменьшать цифры, потому что если
вы сделаете совсем много этажей, то, это будет
выглядеть некрасиво. Все-таки у вас должна быть основная
дробная черта, которая напротив знака равенства и, чтобы
дробь выглядела более-менее симметрично, сверху и снизу от
нее нужно подобрать размер цифр так, чтобы
это хорошо выглядело. Если вы не хотите, чтобы размер
цифр уменьшался, то есть, если вы хотите, чтобы четверка и двойка оставались
такого же размера, как и остальные цифры ну, это бывает нужно, если у вас
там не четверка и двойка, а какие-нибудь тоже сложные выражения, которые важно,
чтобы читатель увидел в первозданном виде. То вместо команды frac, именно той,
которая внутренняя команда frac, можно
использовать команду dfrac. Я дописал всего одну букву dfrac,
запустим на обработку и вы видите, что четверка и
двойка, теперь обычного размера. Вы можете экспериментировать
по-разному с этими командами. Как правило, просто команда frac,
повторенная столько раз, сколько вам нужно, будет давать
приличный результат. Если это не так, то можно
экспериментировать с командой dfrac. Перейдем к следующему нюансу работы с формулами, а именно, нюансу работы со
скобками. Subsection, скобки скобки, это довольно часто
встречающаяся вещь в формулах. Например, я могу, давайте я сразу перейду
в режим выключенной формулы, бэкслэш, открывающаяся скобка,
бэкслэш, закрывающаяся скобка. И напишу что-нибуль вроде два плюс три, в
скобках, умножить - я напишу умножить с помощью
команды звездочка - это неправильно, но мы это скоро исправим, умножить на пять равно
25. Запустим это на обработку, мне нужны были круглые скобки, я просто набрал их с
клавиатуры. В этой формуле все хорошо, кроме знака
умножения. Это неправильный знак умножения, если вы
хотите, чтобы ваш документ выглядел хорошо, не нужно его
использовать. Вместо звездочки нужно написать
какую-нибудь из команд, которая отвечает за умножение. Ну, скажем, есть такая команда, times,
которая создает крестик. Запустим на обработку еще раз и вот мы
видим, теперь это выглядит хорошо. В этой формуле с круглыми скобками,
проблем не возникло. Я просто набрал их с клавиатуры, и они
встали в нужные места. Они, как вы видите, не отделены пробелом
от тех цифр, которых они обнимают. И формула в целом выглядит очень хорошо. Однако стоит мне сделать формулу
несколько более сложной, и это изменится. Скажем, если я вместо три напишу дробь 9/3
- это законное преобразование, однако оно приводит к не
совсем симпатичному результату. Ну, на первый взгляд может показаться, что
опять же все хорошо и читатель поймет вас, если вы сдадите ему такой документ, то
понятно, что здесь призваны делать скобки. Они призваны отделять эту сумму от
умножения. Однако скобки здесь эти неправильного
размера. Вот эта скобка, которая рядом с 9/3,
закрывающаяся скобка, она явно не подходит к тем цифрам, рядом с
которыми она стоит. То, что нам нужно, это сделать ее
подходящей по высоте. LaTeX умеет автоматически подбирать высоту
скобок в соответствии с тем, рядом с чем, они
оказались. Для этого нужно сделать вот такую
несложную вещь. Там, где у меня была открывающаяся скобка,
ведь ее размер тоже нужно подобрать. Открывающаяся скобка, я напишу команду
left, прямо перед этой скобкой. То есть была просто скобка, а стала left
скобка. Texstudio подсвечивает красным, ему не
нравится, потому что открывающаяся скобка с командой left есть,
а закрывающейся нет. Давайте это исправим. И в закрываюшейся скобке напишем команду
right. Так, не здесь. Вот так, теперь вы можете видеть, что
скобки открываются с командой left круглая скобка и закрываются
с командой right круглая скобка. Давайте запустим на обработку, посмотрим,
что получится. Другое дело, высота скобок оказалась ровно
такой, какой нам нужно. Если бы дробь была трехэтажная,
четрыехэтажная, или там был бы какой-нибудь интеграл или какая-нибудь целая функция со
множеством ограничений, и вы бы хотели поставить скобки вокруг них, то эти скобки растянулись ровно настолько, насколько
нужно, чтобы внутри них оказалась весь фрагмент,
который вы хотите, чтобы оказался внутри
них. Итак, если мне нужны не круглые скобки, а, скажем, квадратные, то с ними тоже все
просто. Они просто набираются с клавиатуры. То есть я могу написать что-нибудь в квадратных скобках, в следующей
выключной формуле. И они отобразятся так, как должны быть. Что касается, какие еще скобки
бывают? Например, фигурные. Если мне нужны фигурные скобки, я могу
попробовать сделать так же, как с круглыми и с квадратными, написать
два плюс три. Запустить, и нет никаких фигурных скобок. Формула оказалась просто без них. Дело в том, что фигурные скобки, это очень
важный объект в LaTeX и по умолчанию он воспринимается как
аргумент какой-нибудь команды. То есть, мы видели здесь фигруные скобки,
вот, например, у команды frac есть девятка и тройка, два
аргумента. Эти фигурные скобки нигде не отображаются,
они нужны LaTeX, чтобы понять, что это начало первого аргумента, конец
первого аргумента и то же самое со вторым. Поэтому, если я хочу показать фигурные
скобки, то мне нужно поставить бэкслэш перед каждой
из них. Тогда я скажу LaTeX, что это не фигурные
скобки, которые нужны для ограничения аргумента, а это фигурные скобки, которые просто фигурные
скобки. Я могу точно так же писать перед ними left
и right, как перед любыми скобками - и перед круглыми, и
перед квадратными, и перед фигурными. Могу писать left и right, и они будут
растягиваться так, как нужно.1.2.3
Следующий нюанс, который я хочу обсудить,
следующий subsection в нашем документе, это
стандартные функции. LaTeX знает многие стандартные функции,
которые вам могут пригодиться. Если вы откроете пособие Львовского, то
там есть глава, посвященная набору математики, в ней есть раздел, в котором
перечислены функции, поддерживаемые LaTeX. Скажем, если я хочу написать,
что sin x = 5, Мне достаточно написать команду sin. Команда - это значит, что она начинается
с бэкслэша. Когда я это сделаю, LaTeX распознает, что
мне нужен именно синус, сделает его прямыми буквами,
название функции, как это и положено. Сделает небольшой пробел
перед буквой икс и продолжит обработку строки,
которая у меня написана. То же самое можно сделать с косинусом,
тангенсом, котангенсом, многими функциями, которые
вы привыкли использовать в математике. Скажем, если мне нужен натуральный
логарифм, я могу написать здесь просо ln, то есть те же самые буквы, которые всегда в жизни используют для написания
натурального логарифма. И у меня здесь будет натуральный логарифм. Что, если вам нужна какая-нибудь функция,
которая не известна LaTeX, то есть это какая-то специфическая
функция, которую используют в вашей отрасли науки или вы сами ее
придумали для своей научной статьи. Тогда можно сделать вот как, у меня в преамбуле здесь есть пример того, как это
сделано. "Свои команды" это называется. Есть такая команда \DeclareMathOperator,
вам ее можно не запоминать, потому что вы всегда можете найти ее здесь, скопировать
и сделать столько, столько команд, сколько
вам нужно. У нее вот такой синтаксис, сначала я пишу
то, как должна называться моя команда, то есть то,
как буду я ее вызывать. У меня это будет команда сигнум, и во
втором аргументе команды \DeclareMathOperator я
пишу, что же нужно сделать. И нужно сделать оператором mathop сделать буквы sgn, которые отвечают за команду
сигнум. Вы можете не вникать в то, как именно это сделано, пока вы не стали продвинутым
пользователем. Можете просто пользоваться, создавая по
аналогии свои функции. Если я теперь вместо логарифма здесь
напишу \sgn то до того, как я определил \DeclareMathOperator, LaTeX
стал бы ругаться, что это не известная ему
команда. Я определил эту команду в преамбуле, и теперь она обрабатывается так же, как
синус или косинус, то есть определение команды в преамбуле позволило мне
использовать ее дальше. Ну, сигнум икс равно пяти - это конечно не
может быть правдой. Давайте я исправлю на единичку. Слудующий нюанс, который мы обсудим, subsection, это символы. Существует огромное множество символов,
которые вы можете захотеть использовать в
формулах. Это как математические символы, так и
символы из других наук. Файл, который содержит неполный перечень
символов, которые вы можете использовать в LaTeX в математическом
режиме, занимает более 160 страниц. Этот файл вы можете найти в материалах
курса. Он написан по-английски, но, в
общем, текста там почти нет. Там нарисованы символы и команды, которые
за них отвечают. Вы найдете там, я не постесняюсь сказать,
все, что может вам понадобиться. Если вы что-то, что вам понадобится, не найдете там, значит вы, скорее всего, плохо
искали. Потому что это огромный набор символов на
все случаи жизни. Я сейчас покажу несколько
самых простых. Скажем, если я хочу написать, что дважды два... два, дальше times, команда, которую мы
уже встречали. Дважды два не равно пять. Для команды "не равно", существует
специальная команда ne которая расшифровывается как non equal, не
равно пять. Давайте запустим, посмотрим, что
получается. Дважды два не равно пять. То есть команды обработались так, как это
нам было нужно. Давайте сделаем еще что-нибудь. Скажем, я хочу сказать, что какое-нибудь там множество А пересекает
множество B. Символ пересечения, как вы может быть знаете, это такая "подкова", направленная
рогами вниз. Она напоминает головной убор. И здесь, чтобы ее создать, нужно написать
cap, A \cap B - это значит пересечение множества А
и B. Я не буду пока запускать, напишу по
соседству еще одну команду. А объединение с B, объединение - это подкова, направленная вверх, и она
напоминает некую чашу. Здесь она задается командой cup. A \cup B. Вы можете видеть, что получилось. Это только самые основные примеры. Если вы откроете тот самый файл с
символами на 160 страниц или пособие Львовского
с соответствующей главой, которая называется "Таблица спецзнаков с
комментариями", то вы найдете множество символов, которые могут вам пригодиться, которые каким-то удобным образом
классифицированы. Иногда для работы с некоторыми символами потребуется подключение
дополнительных пакетов. Очень многие символы содержатся в пакетах,
ну, или в стандартном LaTeX, или в пакетах AMS, которые у нас здесь
подключены с самого начала. Но, если какой-то символ содержится в
пакете, который вы еще не покдлючили, то вы всегда можете подключить
его точно такой же командой usepackage. Так, следующий нюанс, который мы обсудим, это диакритические знаки. Диакритические знаки - это символы, которые расположены над или под другими
символами. Скажем, если я хочу написать, что у
меня переменная икс равна пяти. С этой формулой все понятно, просто икс
равно пяти. А что, если мне нужно чтобы не просто икс, а икс с чертой было равно пяти, с чертой
сверху. Тогда я могу использовать команду bar
просто перед командой икс, я напишу \bar x = 5. Если я запущу это на обработку, то я увижу, что у меня получился икс с
чертой. Если икс с чертой равно пяти, а икс
с тильдой или с волной сверху равен восьми, то нужно так и
написать - тильда икс равна восьми. Запустим, и диакритический знак уже другой -
это тильда. Открыв любое пособие по LaTeX,
например, Львовского, вы найдете полный набор
диакритических символов. Там есть французские аксаны, которые в
разные стороны направлены. Там есть точки, несколько точек, тильда,
домик, черта и много других. Обратите внимание, как я здесь написал эти
команды. Мне нужно, чтобы bar, то есть черта и
тильда, стояли над одной буквой. Почти всегда, когда я хочу скормить
команде аргумент из одного символа, можно не
ставить фигурные скобки. То есть я тут мог поставить фигурные
скобки, вот, написать так, bar с фигурными скобками
икс. Но это привело бы точно к такому же
результату. То есть у команды bar есть один аргумент,
который может быть в фигурных скобках, но если он состоит из одного символа, то
эти фигурные скобки можно игнорировать. Если я хочу, чтобы черта стояла сразу над
несколькими символами, скажем, я хочу, чтобы черта стояла над
икс, игрек, зет. Тогда фигурные скобки мне понадобятся
обязательно. И я пишу bar, дальше в фигурных скобках аргумент, состоящий из
нескольких символов. Запускаем, и результат не должен нас
устраивать. Потому что верхняя черта оказалась такой
же ширины, как всегда, то есть, как она была до
этого. В итоге она оказалась шириной в один
символ, причем она даже оказалась не совсем над игреком, а
где-то смещена немножко влево. То есть никак нельзя понять по этому
результату, что я хотел, чтобы черта была над икс, игрек,
зет. Если я хочу черту подлиннее, то вместо
команды bar, нужно использовать другую команду,
overline, линия сверху. Вот, теперь другое дело. Команда overline поставила длинную черту
над всеми тремя символами, которые есть у нее
в аргументе. Если я напишу сюда больше символов в
аргумент, команду overline запущу на обработку, то черта будет
такой длины, какой нужно. То же самое с тильдой. Если мне нужна длинная тильда, над
каким-нибудь длинным выражением, то обычный символ,
который мы использовали до этого, приведет к тому же нехорошему результату, который был и с
командой bar. Но есть специальная команда, которая,
которую очень просто запомнить widetilde - широкая
тильда. Если я запущу это на обработку, то тильда
растянулась. Но это не очень симпатично, поэтому я
советую вам дважды подумать, прежде чем использовать какие-то переменные, состоящие из такого количества
букв. И ставить над ними тильдами. И ставить над ними тильды. Следующий нюанс, следующая проблема, с
которой вы можете столкнуться в наборе формул - это буквы других алфавитов. Чаще всего нужны греческие буквы. Есть такая традиция, что переменные
обозначаются латинскими буквами, в первую и во вторую очередь
греческими. Если у вас под рукой греческая клавиатура,
с греческой раскладкой, то вы можете её использовать, но я предполагаю,
что скорее всего у вас её нет. Поэтому вам понадобятся специальные
команды для написания греческих букв. Давайте попробуем написать что тангенс
альфа равен единице. И я пишу команду тангенс. Теперь мне нужна буква альфа. Буква альфа пишется очень просто. Есть команда- альфа. Вот и все. Она пишется так же, как и названи этой
греческой буквы. У меня написано тангенс альфа равно
единице. Запустим. Мы увидим греческую букву альфа. Эээ. . Вы легко найдете или у Львовского, или где-нибудь ещё греческий алфавит с
соответствующими командами. Там никогда нет ничего сложного. Все буквы названы так, как они
называны в греческом алфавите. Если вам нужна заглавная какая-нибудь
буква, скажем, заглавная буква фи, то нужно просто написать её с
заглавной буквы. То есть команда, команда, которая задает
строчную, команда, которая задает строчную фи - это три маленькие буквы
phi, которые делают букву фи. А команда, которая задает заглавную фи, -
это те же самые три буквы, только первая из них
тоже заглавная. Это надо просто запомнить. Есть два нюанса, нет, три нюанса, связанные
с греческими буквами. Первое: если вам нужна заглавная буква
альфа, давайте попробуем. Что, если я хочу получить заглавную букву
альфа, то есть я напишу альфа с большой буквы. Запустим, и я поздравляю вас, впервые мы
получили ошибку. Ошибка показана в нижней части экрана
в программе TeXstudio. В других программах она может быть в
других местах. Здесь написано: undefined control
sequence $\Alpha. Это значит, что LaTeX неизвестна такая
команда, как алфа с большой буквы. Казалось бы, довольно простая команда. Почему она неизвестна LaTeX? А потому, что вам никогда не понадобится
заглавная греческая буква альфа. Поэтому в LaTeX нет специальной команды
для неё. Вам не понадобится её использовать. Поэтому мы не будем её использовать,
удалим... Оставшиеся два нюанса связаны с тем, как
две греческие буквы принято писать в научных статьях
на разных языках. Вот есть такая буква как эпсилон, которую
вы возможно знаете. Если я напишу, да, давайте я сразу обе
напишу: эпсилон, а вторая - эта та самая фи, только
строчная. Запустим, ага. . Эпсилон я написал с ошибкой, видите, с
опечаткой. Поэтому я удалю ненужные символы. Итак, две строчные буквы эпсилон и фи... ага, и фи я написал с ошибкой, смотрите, я
забыл бэкслэш. Теперь я его ставлю, теперь это настоящая
команда, теперь должно быть все хорошо. Вот, у меня две буквы эпсилон и фи
оказались в итоговом PDF-документе. Возможно, вы привыкли видеть эти буквы
другими, если вы привыкли читать русские книжки по
математике. Для того чтобы написать буквы эпсилон и фи
в привычном для русского читателя виде, нужно использовать
команды varepsilon, то есть вариация эпсилон, и varphi. Запустим... Вот, те же самые буквы в другом начертании в PDF-документе, вот здесь, во второй
строке из тех, которые я выделяю, в том виде, в
котором принято писать в русской традиции. В одном из следующих занятий мы с вами научимся переопределять команды, то
есть написать что-то в преамбуле,
после чего вы можете забыть про varepsilon, varphi. Писать обычные epsilon и phi, и там будут
те, то начертание букв, которое вам нужно, с помощью каких-то
специальных макросов. Ну пока, если вам срочно нужен, срочно
нужны эти где-то греческие буквы в таком начертании, то используйте команды с
префиксом var.1.2.4
Новый section в нашем документе, новый
раздел - это "Формулы в несколько строк". Типичным разделителем строк в LaTeX является просто пустой абзац, как мы с
вами уже изучили. Если вы оставляете пустую строку, то то, что
вы будете писать после этого, LaTeX начнет с
новой строки. Однако в математическом режиме это не
работает. Давайте убедимся. Вот я перехожу в математический режим,
пишу открывающуюся скобку со слэшем и
закрывающуюся со слэшем. И я хочу написать, что, например, дважды
два равно четыре. Оставлю пустую строку и напишу еще, что
трижды три равно девять. Запущу это на обработку. Что произошло? Произошло сразу несколько ошибок. Вы видите в левой нижней части экрана 4 ошибки, но общее правило работы с ошибками
- такое. Я думаю, что об ошибках мы еще дальше
поговорим, но общее правило работы - такое:
исправляйте первую встретившуюся ошибку. Не нужно смотреть на все ошибки,
думать, какая из них самая важная, выбирать и
разбираться с ней. Исправляйте первую ошибку - просто потому,
что ошибки кроме первой могли быть вызваны тем, что в LaTeX что-то сломалось на
этапе обработки вашей первой ошибки. Может быть, вы исправите только одну первую, и все остальные исчезнут сами
собой. В данном случае первая ошибка называется
"Missing $ inserted". То есть LaTeX говорит нам: "Вы где-то
пропустили знак доллара". То есть вы где-то пропустили переход в математический режим. Или выход из
математического режима. Это вполне естественно. LaTeX не приемлет пустых срок внутри
формулы. То есть вы не можете, находясь внутри
формулы, делать новый абзац так же, как вы делаете это в обычном
тексте. Поэтому здесь возникла ошибка. Если я, скажем, уберу пустую строку и просто запущу получившийся документ, то
все ошибки исчезнут, но то, что мы получим,
будет далеко от того, что мы хотели. Поскольку один перенос строки, как я уже говорил, всегда воспринимается
LaTeX как пробел, а пробелы в формулах почти всегда
игнорируются, то этот перенос строки был просто
проигнорирован. Мы увидели результат такой же, как мы бы увидели, если бы здесь было написано
просто, что дважды два равно сорок три умножить на три равно девяти, что является полной
ерундой. Что же, если мы хотим сделать формулу,
состоящую из нескольких строк? Ну, если вы забыли, как это делается и вам
негде подсмотреть, и никто не может вам помочь, то, в крайнем случае,
вы можете просто начать новую формулу. Скажем, я могу здесь еще раз перейти в
математический режим и написать, что трижды три равно девять. Запускаем. Ну, вот теперь результат получился более
приемлемым. Теперь мы видим действительно те две
формулы, которые хотели видеть. Действительно видим их в двух строках, как
и хотели увидеть, но это не то, как надо действовать на
самом деле. Потому что, ну, во-первых, между ними оказался огромный, огромный промежуток,
между этими формулами. Гораздо больше, чем обычный промежуток
между абзацами, что нам бы не хотелось. Во-вторых, может быть мы хотим создать
формулы из нескольких строк и присвоить ей единый номер, что здесь тоже не получится сделать, поскольку это две
различные формулы. Для того чтобы создавать формулы из нескольких строк, существуют несколько
специальных инструментов. Давайте рассмотрим их по очереди. Первый инструмент, который я хочу
рассмотреть, первый нюанс, будет относиться к очень длинным
формулам. Что, если перед нами очень длинная
формула? Так, вот, скажем, очень такая длинная формула, в которой есть сумма натурального
ряда чисел с первого номера по сотый. Кстати, это равно, кажется, 5050. Если я хочу сообщить своему читателю вот
такие сведения о том, что сумма всех чисел от одного до ста
равна 5050, - причем я хочу сообщить это читателю
именно так, как здесь написано, то есть хочу написать начало этого ряда,
потом поставить многоточие, которое ставится командой \dots, потом середину
этого ряда, а потом конец. Тоже после многоточия. Что получается? Получается не очень хорошо. Во-первых, вся формула как бы сжалась. Вы видите, что расстояние между плюсами
отсутствует. Это пришлось сделать LaTeX, потому что
если поставить нормальные пробелы между плюсами и цифрами, то формула бы просто не
влезла в страницу. Ну и вообще не очень красиво выглядит. Такая длинная формула сложно
воспринимается. Конечно, то, что я сейчас написал, это
почти бессмысленная формула. Но легко представить себе… То есть можно
было написать ее гораздо короче, и смысл был бы тот же
самый. Но можно представить себе ситуации, когда
у вас действительно какая-то сложная формула, состоящая из
многих слагаемых, и вы хотите, чтобы она как-то правильно
выглядела: и влезала в строку, и цифры, и буквы не были
слишком мелкими. И, в общем, чтобы она как-то выглядела
прилично. Чтобы это сделать, нужно воспользоваться
окружением. То есть начиная с команды \begin и
заканчивая командой \end. \begin, окружение multline. Соответственно, в конце нужно написать
\end{multline}. multline. Что это окружение сделает? Правильный способ отображения очень
длинных формул, то есть тот, который принят в наборе книг, вот какой: вы должны первую
строку прижать к левой части страницы, все строки, кроме первой и последней,
выровнять по центру, а последнюю строку прижать к
правой части страницы. Это некоторым образом похоже на то, как
оформляются, например, стихи Маяковского. Сначала слева, следующее слово в середине, и следующая строчка прижата к правой
части. Чтобы сказать LaTeX, в каком именно месте мне нужно сделать разрыв, я должен
поставить специальную команду в этих местах, которая отвечает за переход на новую
строку. Эта команда - двойной бэкслэш. Вот так вот. Я хочу, чтобы было 2 переноса. Вот здесь и здесь, то есть после
многоточий. У меня пока здесь еще не все правильно,
потому мне нужно, чтобы плюс дублировался, когда я переношу его, чтобы он был и на
старой строке, и на новой. Мы изучали в одном из предыдущих
фрагментов команду \hm, которая позволяет автоматически это сделать, если
вы заранее не знаете, где будет перенос. Но здесь я точно знаю, где будет перенос. Я так сделал эту формулу. Поэтому ничего страшного, если я напишу
этот плюс 2 раза непосредственно. То есть до знака переноса строки и после
знака переноса строки. Запускаем. И вот мы видим правильно сделанную
формулу. Вот теперь она выглядит так, как и должна
выглядеть. Она, кстати, получила номер. Номер 2, потому что, как вы помните, мы в одном из предыдущих фрагментов сделали
номер 1. Формула MR = MC. Итак, это способ оформлять очень длинные
формулы. То есть одно выражение, не несколько
выражений, а одно выражение, которое вы хотите разнести на несколько строк,
потому что оно очень длинное. Формулы в несколько строк приходится
оформлять не только в этом случае, а в том случае, если вы хотите поместить
несколько связанных друг с другом и логически, логически
связанных. Тех, которые должны находиться рядом друг с другом,
формул. Вот в какой-то блок между блоками текста. Для этого существует целый ряд команд. Давайте я наберу \subsection. И назову это "Несколько формул". Существует целый ряд команд. Я предлагаю начать с команды, которая
называется align. Пишется вот так. align. Вот, мне LaTeX это сразу подсказывает. Содержимое. Внутри содержимого я могу написать свои
уравнения, которые мне нужны. Скажем, то самое дважды два равно четыре. Тут новая новая строка делается точно так
же, как и в multline, то есть двойным
бэкслэшем. Новая строка. Трижды три равно девять. Хорошо. Ну давайте я еще одну строку для
разнообразия сделаю, в которой я напишу, что десять умножить на вот такое число равно вот такому числу. Вот это все - верное равенство. После последней строки не надо ставить двойной блэкслэш, потому что больше некуда
переносить. На этом все заканчивается. Давайте попробуем запустить это на
обработку. Мы видим довольно приемлемый результат. На что можно обратить внимание? Во-первых, каждая формула получила номер. То есть каждая строчка получила номер. В следующем фрагменте мы обсудим, как это
изменить. То есть как более тонко работать с
номерами. Но если вам нужно, чтобы каждая строчка
получила номер, то ничего менять не нужно. Во-вторых, они выровнены по правому краю. Особенность окружения align заключается в
том, что оно позволяет добиваться правильного
выравнивания, собственно, align и переводится, как выравнивание. Выравнивание, как правило, в LaTeX, всякие
табуляторы и вообще, объекты, находящиеся в вертикальном соответствии друг с другом,
ставятся с помощью команды амперсанд. Хорошим тоном является выравнивать,
вот, группу формул, подобной этой, по знаку "равно", то есть чтобы знаки
"равно" оказывались один под другим. По умолчанию здесь все выровнено по
правому краю, и это не очень хорошо смотрится. Хотелось бы, чтобы знаки "равно",
соответствовали друг другу вертикально, а не правая часть
формул. Я ставлю амперсанд в том месте
каждой строчки, где я хочу, чтобы было вертикальное соответствие, перед
знаком "равно". Запускаю, и получаю результат, который
хотел. То есть, теперь у меня здесь все выровнено
по знаку "равно" независимо от того, какая ширина у объектов, которые
находятся слева и справа от этого знака. Окружение align позволяет сделать
еще более мощную вещь, а именно, сделать, чтобы не только
было несколько формул в разных строчках, но и
сделать целую таблицу из формул, то есть сделать
несколько столбиков. Чтобы перейти к следующему столбику
формул, мне нужно еще раз поставить амперсанд. Обратите внимание, все нечетные
амперсанды отвечают за - то есть первый, третий, пятый - отвечают за
выравнивание внутри столбцов. Все четные амперсанды - второй, вот который
я сейчас поставил, дальше четвертый, шестой и так далее - отвечают за
новый столбец формулы. Вот я сейчас поставил второй амперсанд, и
захочу здесь, и хочу здесь написать формулу, что шесть
умножить на восемь равно 48. Давайте я добавлю по одной формуле
к каждой из строк. Здесь я хочу написать, например, что
a плюс b равно c, равно c. А здесь, в последней строке, что дробь три
вторых равна 1,5. Не забуду поставить еще по одному
амперсанду перед знаками "равно", чтобы второй столбик тоже
выровнялся, как нужно. И запущу на обработку. Вы видите аккуратно оформленные два
столбика формул, каждый из которых выровнен по соответствующему знаку
"равно", который я указал. И эти столбики разделены нужным
расстоянием, то есть все это подобрано, где они должны
находиться, подбирается автоматически. Здесь у меня не очень красиво получилось,
вот, вы можете видеть, - иногда, когда вы будете писать текст, который вам кажется вполне нормальным, потом смотреть,
что получилось - иногда получаются какие-то нюансы,
которые вам бы хотелось исправить. Вот здесь, когда я смотрю на этот фрагмент,
мне хочется исправить вот эту дробь три
вторых, потому что вы можете видеть, что из-за нее последняя
строка разъехалась, и вот здесь, в первом столбике, разрыв
получился слишком большой. Это выглядит некрасиво. Поэтому в данном случае более удачно
будет написать дробь три вторых не через команду \frac, а просто через
обычный слэш, который означает деление. Да, что у меня там было написано? Что три вторых равно полтора. Вот, если запустить, сейчас, стало гораздо
лучше. То есть, все строчки выглядят аккуратно и
одинаково. Что, если вам нужно, чтобы не каждая строка
в формуле, которую вы пишите, получала номер, а чтобы
вся группа строк получила номер. Скажем, вы пишите формулировку какой-то
задачи, там есть какая-нибудь целевая функция,
ограничение, и все они относятся к одной задаче,
которой вы хотите этот номер присвоить. Для этого есть окружение с очень похожим синтаксисом, который
называется aligned. Я сейчас покажу, как это пишется. aligned. Давайте я вот возьму и скопирую сюда все, что у меня
было в окружении align. И попробую запустить. Посмотрим, что
получится. Ошибка. Давайте почитаем, что за ошибка. Здесь написано: "Ошибка пакета amsmath". Это один из пакетов, который мы подключали
для расширенной работой с математикой. "\begin{aligned} allowed only in math mode". Это переводится так: "Ошибка
пакета amsmath, которая заключается в том, что окружение aligned разрешается
только в математическом режиме". В этом отличие окружения align, которое мы
использовали перед этим, от окружения aligned, которое мы пытаемся
использовать сейчас. Дело в том, что, чтобы использовать aligned, нужно перейти в математический
режим. Если я хочу номер, то я тогда напишу
\begin{equation} и \end{equation} вставлю в конец. То есть, когда я пишу просто align, то LaTeX понимает, что нужно перейти в
математический режим. Когда я пишу aligned, он необязательно это
понимает. Почему так сделано? Потому что aligned, то есть вот эта табличка с
номером, она может быть внутри какой-то более
сложной формулы. То есть кроме этой группы, которой
вы хотите присвоить единый номер, в вашей формуле может быть еще что-то, например,
вы можете поместить окружение aligned внутри
окружения align. И поэтому окружение aligned
воспринимается как часть математического режима, и нужно перейти в специальный математический
режим, чтобы он работал. Сейчас, когда я ввел эти \begin{equation},
end{equation}, давайте запустим. И вы видите, что теперь у меня эти же самые формулы, но получили теперь
единый номер. Номер шесть. Следующий способ, когда вы
захотите получить формулу, состоящую из нескольких строчек, - это
система уравнений. Давайте, я напишу здесь новый subsection. "Система уравнений". Система уравнений - это такая группа уравнений, которая отличается от
aligned, использовавшегося
нами перед этим, тем, что там есть большая фигурная скобка. Собственно, изменений совсем немного. Чтобы получить систему уравнений, нам
нужно воспользоваться окружением aligned. То есть сделать то же самое, что мы
делали в предыдущем случае. Вставляем. Ну, система уравнений вряд ли
будет состоять из такой таблицы. То есть там будет, наверное, просто какая-то, какая-то группа уравнений,
скажем, вот. Давайте я заменю это на переменные. Два умножить на икс равно четырем. Три умножить на игрек равно девяти. И десять умножить на это число равно зет. Если я сейчас запущу это
обрабатываться, то я увижу просто табличку из трех формул. Нет, тут нужен еще один аперсанд перед
знаком "равно". Чтобы поставить фигурную скобку,
мне нужно сделать то, что мы уже делали. Как вы помните, фигурная скобка
задается с помощью специальной команды, то есть вы не можете просто
набрать ее с клавиатуры. Нужно набрать ее с бэкслэшем. Вот я набрал ее перед началом формулы. Вы видите, что TeXstudio, редактор, в
котором я работаю, предложил мне автоматически
закрывающуюся фигурную скобку. Вот она как раз мне не понадобится. У системы только с одной стороны есть
фигурная скобка. Поэтому, я ее удаляю. Я ее удаляю. TeXstudio это не нравится: как вы
видите, он выделяет красным, потому что открывающаяся скобка
есть, а закрывающейся нет. Кроме того, мне нужно, чтобы эта фигурная
скобка была нужной высоты. С этой задачей мы тоже уже сталкивались. Я могу написать здесь \left - как вы
помните, когда я пишу \left, это создает фигурную скобку или
любую другую скобку, нужной высоты. Ту скобку, которая следует за командой
\left. Однако, LaTeX не нравится, что открывающаяся скобка есть, а
закрывающейся нет. Если мы сейчас попробуем это обработать,
то будет ошибка. Это сделано для того, чтобы вы сами
следили за своим набором, то есть, может, вы случайно пропустили скобку,
и тогда вам нужно об этом напомнить. Чтобы избежать случайных пропусков скобки,
LaTeX ругается каждый раз, когда вы его
пропускаете. Нужно четко сказать LaTeX, что мы ничего не пропустили. Ну,
естественным было бы написать здесь \right и
закрывающуюся фигурную скобку. И тогда у нас была бы система, которая с двух сторон обрамлена фигурными
скобками: слева и справа. Но мы не хотим этого, нам не нужно, чтобы здесь было две
фигурных скобки. Нам нужна только одна. Поэтому вместо фигурной скобки после
команды \right мы поставим точку. Точка - это фантом скобки. То есть как будто бы она там есть, то есть LaTeX не нужно беспокоиться, что мы
ее забыли, но отображена она не будет. Давайте попробуем запустить. Так, эта ошибка означает вот что: я
сделал то, что только что советовал вам не делать, а именно, нужно все-таки поставить
здесь бэкслэш перед фигурной скобкой. Это команда. У меня он был пропущен,
поэтому это вызвало ошибку. Давайте теперь запустим. Итак, перед
нами то, что мы хотели видеть. То есть система уравнений с фигурной
скобкой, растянутой ровно так, как нужно, и с отсутствующей закрывающейся
фигурной скобкой. Именно так, как нужно оформлять
систему уравнений. Еще один случай, очень похожий на систему уравнений, это кусочное задание
каких-нибудь функций. То есть когда вы можете сказать, что
какая-нибудь функция равна одним значениям при каком-то условии, а при
другом условии равна другим значениям. Там тоже используется фигурная скобка. И вы можете получить это с помощью того метода, который мы только что
обсудили. Но есть специальный метод, который немного упрощает всю процедуру, этот метод
называется cases. Давайте я перейду в математический режим,
cases значит случай. То есть в разных случаях функция равна
разным значениям. Так, давайте я, например, напишу, как
определяется функция модуль икс. Модуль - это вертикальные черточки, я
просто набрал их с клавиатуры - это можно сделать, они
будут восприняты правильно. Итак, модуль икс, равен… В разных
местах по-разному. Иногда он равен просто икс, а иногда он
равен минус икс. Поэтому я пишу \begin{cases}, \end{cases}
тоже нужно написать, но в TeXstudio они
подставились автоматически. И, я могу написать, что "модуль икс равен
икс", дальше запятая, могу написать здесь - "если", потом я могу написать, "икс", - нужно написать
"больше или равно нулю". За знак больше или равно отвечает команда
специальная \ge. Greater or equal, легко запомнить. Икс больше или равно нулю. Дальше я ставлю разрыв строки. И пишу второй случай, "минус икс, если икс
меньше нуля". Это все правильно, с точки зрения
математики. Но если я попробую просто запустить это,
то LaTeX выдаст ошибку. Это уже знакомая наш, нам ошибка -
пропущен доллар. Это значит, что мы как-то неправильно
используем текстовый математический режим: или мы в текстовом
режиме начали писать то, что нужно писать в математическом, или
в математическом начали писать то, что нужно
писать в текстовом. Здесь именно последний случай. Вот эта
команда, это слово "если", оно не является формулой. И поэтому оно должно быть в
текстовом режиме, а не в математическом. Если мы находимся внутри математики, как
перейти в текстовый режим? Существует специальная команда \text. Если
я напишу "если" внутри команды \text, то все будет
хорошо. Ну, почти хорошо. Итак, я оба "если" заключил внутрь команды
\text, и запускаю это обрабатываться. Ошибок нет. То есть, с точки зрения LaTeX,
ошибок нет. Но если мы посмотрим, что получилось, -
получилось не совсем то, что нужно. Потому что после "если" нет пробелов. Ну, действительно, все пробелы в математическом режиме игнорируются,
кроме пробелов после запятой, как вы помните, который
здесь оказался в нужном месте. Но остальные пробелы игнорируются,
поэтому чтобы все было хорошо, пробел нужно поставить в
текстовом режиме. Обратите внимание, что я после "если"
ставлю пробел. Если б мы не подключили команду…
Package… Пакет icomma, то тогда и здесь пришлось бы
поставить пробел. Потому что после запятой тоже не было бы пробела без этого подключенного
нами пакета. Давайте посмотрим, что получилось. Вот теперь уже лучше. Вот - это окончательный вариант. Ну, не очень окончательный все же. Потому что выравнивание, опять, не очень
изящное. Хотелось бы, чтобы слова "если" начинались с какого-нибудь одного и того же
горизонтального промежутка, то есть, хотелось бы, чтобы слова "если" находились в
вертикальном соответствии. И этого очень просто достичь. Как всегда, нужно поставить амперсанд. Так же, как в окружении align, я ставлю амперсанд, и выравнивание
получается такое, какое должно быть. Вот, очень красивая формула,
которую мы сделали с помощью окружения cases.1.2.4
В этом последнем видеофрагменте,
посвященном первому уроку "Математика в LaTeX", я хочу показать вам, как делать матрицы и как
более тонко работать с нумерацией формул. Для этого я в нашем документе, с которым
мы работаем в этом уроке, создам новый section и назову его "Матрицы". И сделаем какую-нибудь простую матрицу. Перейдем в математический режим. Матрицу вы хотите почти всегда набирать
в режиме выключной формулы, то есть, чтобы она была на
отдельной строке. Какая-нибудь матрица высотой больше чем
в одну строку внутри текста выглядит
странно. Поэтому я перешел в режим выключной
формулы и набираю команду \begin{pmatrix}. pmatrix - p-матрица. Сейчас вы увидите, что
это означает. А внутри нее использую такой же синтаксис,
как использовался в командах \align и \aligned, то есть амперсанды для разделения
столбиков, и двойные обратные слэши для разделения
строчек. Итак, первая строчка. Скажем, у меня
матрица - вот такая. Скажем, a с индексом один один, - чтобы
поставить нижний индекс, кстати, нужно поставить такое подчеркивание после
символа, и дальше в фигурных скобках написать то, что должно
быть в этом индексе. Амперсанд, следующий элемент - это a один
два - например. Следующий элемент - это a один три. Смотрите, результатом того, что я так
написал один три, будет то, что единичка только будет в индексе, а
тройка будет уже большой цифрой. Потому что если фигурных скобок
нет, то только первый символ после подчеркивания
воспринимается как нижний индекс. Поэтому я поставлю все это в фигруные
скобки. Все, строчка закончилась. Я ставлю двойной обратный слэш. Во второй строчке у меня элементы a два
один, a два два, и a два три - все они разделены
аперсандами. Вот, давайте попробуем это запустить. Что мы видим? Мы видим матрицу, окруженную круглыми
скобками, то есть самую часто встречающуюся,
наверное, матрицу. Команда pmatrix создает именно ее. Вам не нужно заранее продумывать,
какого размера будет эта матрица, и не нужно 
как-то думать о том, как будут в ней построены цифры, как их нужно выравнивать, сколько
будет столбиков, строчек. Вы просто пишете их естественным образом,
а все остальное LaTeX подберет сам. Что, если мне нужна матрица не в круглых
скобках, а в каких-нибудь других скобках? Например, матрица в таких…
внутри двух вертикальных линий. Для этого, для этих вертикальных линий,
вместо окружения pmatrix, мне нужно написать
vmatrix. Обратите внимание, что TeXstudio сразу
исправил, когда я исправил в команде \begin, то команда \end
исправилась сама собой. vmatrix - это значит вертикальные линии,
вот так вот. Вот такая получилась матрица. Ну, какие еще бывают случаи? Например, если мне нужна матрица в
квадратных скобках, то я, опять же, исправлю здесь
одну букву, и это будет bmatrix. Запускаем, вот матрица в квадратных
скобках. Очень просто, если вам не нужны больше
никакие навороты от этих матриц, скажем, какие-нибудь линии, разделяющие столбцы
или строки, то вы можете создавать их вот так просто. Если вам нужны какие-то навороты, скажем,
вам нужна какая-нибудь окаймленная матрица, и требуется провести где-нибудь
вертикальную, горизонтальную черту, или поставить многоточие сразу на
несколько строчек и столбцов, то это потребует несколько
более продвинутой работы. С этим вы можете познакомиться в любом
пособии, например, в Львовском. И последнее, я говорил, что можно
варьировать то, как нумеруются формулы. Вот
смотрите, если вернуться назад в наш документ, там, где у нас было несколько формул, вот это вот,
целых, целых шесть формул получили три номера, и
в общем, это не очень естественно. Скорее всего,
такой набор формул нужен просто, чтобы показать
какой-то набор выражений. Может быть, я никогда не буду на
него ссылаться, и номера совсем не нужны. Для этого я могу вместо команды align,
которую я здесь использовал, - вот видите, я в
исходном тексте вернулся к этому месту, - могу
использовать команду align со звездочкой. Это частое явление
в LaTeX, что если вы вместо какой-то команды
используете ее версию со звездочкой, то просто
исчезает нумерация. Давайте запустим, и посмотрим, что будет. Вот и все, нумерация исчезла у всего, что находится внутри этого align со
звездочкой. Ну и, естественно, вся остальная
нумерация перестроилась, то есть раньше здесь вот
эта тройка была не тройкой, а шестеркой,
потому что перед ней было еще три формулы. Но теперь, в соответствии с новой нумерацией, она является номером
три. Вот. Что, если я хочу - вот, у меня тут был multline, он тоже получил
автоматический номер, - это тоже верно, что если бы я написал multline со звездочкой, то не было бы
никакого номера. Но что, если я хочу вместо номера
два что-нибудь другое? То есть, что, если я хочу
нумеровать вот именно эту конкретную формулу не цифрой, которая
ей соответствует, а каким-нибудь своим символом или каким-нибудь словом,
которое мне нужно, чтобы здесь было. Для этого есть такая команда, \tag, и
внутри команды \tag нужно написать, что я здесь
жду. Скажем эту формулу, я хочу назвать как-нибудь буквой, буквой S, потому что
это сумма. Я написал здесь \tag{S} - давайте запустим и
посмотрим, что произошло. Двоечка, которая здесь была, заменилась на
букву S. Вместе с тем, нумерацию надо
продолжать, а двойки еще не было, поэтому то, что дальше, получило номер. Это теперь
цифра два. Вот. Что если я на эту формулу c буквой S
хочу сослаться? Помните, что есть такая команда \label? Я у \label напишу название eq, потому что это
equation. Такой тип, тип объекта, и назову его
сумма - sum. А дальше куда-нибудь там перейду вниз, в
самый конец документа, и скажу, что "В уравнении", - как вы помните, используется команда \eqref, чтобы ссылаться на
уравнения, - и мне здесь предлагается выбор. Вот я нашел свое. "В уравнении \eqref", которое указано, "на
странице", на странице, теперь "\pageref" - \pageref тоже можно
выбрать - так, "много слагаемых", точка. Давайте запустим и посмотрим, что
получилось. А, у меня здесь опечатка, сейчас я ее
исправлю. Вот, что получилось: "В уравнении S на
странице два много слагаемых". То есть сюда подставляется, в команду
\eqref подставляется что бы то ни было, чем пронумеровано
уравнение, на которое мы ссылаемся. Некоторые стандарты требуют, чтобы
пронумерованы были только те формулы, на которые в тексте есть
ссылки. Но, иногда, это сложно предугадать, какие
формулы будут со ссылками, а какие нет. Было бы удобнее пронумеровать все
формулы, потом расставить ссылки в документе на те из них,
которые нужны, и сделать так, чтобы отображались только
нужные номера. То есть нумеровались только те формулы, на которые в тексте есть непосредственная
сссылка. Поскольку это было бы удобнее, вполне
естественно, что в LaTeX это реализовано. Если мы вернемся в нашу преамбулу, там
есть такая команда, которая пока что была под
комментарием, - вот эта вот. showonlyrefs = true. Если я
уберу здесь знак процента, то есть заставлю LaTeX эту
команду обработать, то произойдет именно то, что я сейчас
описал. То есть номера исчезнут у всех формул, на
которые в тексте не встречаются ссылки. Но у тех, на которые встречаются
ссылки, номера формул останутся. Итак, запускаем, и можно видеть, что нигде
больше номеров нет, кроме двух мест, которые мы
использовали для ссылок. Во-первых, уравнение MR = MC, которое у нас автоматически
пронумеровалось единицей. Как вы помните, мы тут на него сразу же
сослались - вот здесь. И то самое уравнение S, на
которое мы тоже сослались, - вот оно. Мы на него ссылаемся в конце,
поэтому LaTeX оставил у него номер. Это замечательная функция, которая
очень сильно облегчает жизнь, если вы делаете, особенно, большой документ,
и вдруг внезапно узнали, что только те формулы
пронумерованы, на которые есть… должны быть пронумерованы, на которые есть
ссылки в документе. Такая новость, которую вам может сообщить ваш редактор, может быть очень
плохой, если вы делаете документ в Word, потому что там придется вручную это
переделывать. Но здесь нужно всего лишь одну строчку
добавить в преамбулу, и будет реализовано то, что
нужно. Что, если ваш редактор вдруг вам сказал,
что нумерация всех формул в вашем документе должна быть
слева, а не справа. Вот здесь она, как вы могли видеть, была
всегда справа. Но, если вам нужно нумеровать слева, то в
LaTeX это делается очень просто. Нужно в самом начале документа,
там, где у нас есть команда \documentclass, добавить
еще один аргумент. Там сейчас два аргумента: то, что бумага A4, и
шрифт 12 пунктов. То, что нужно добавить,  - это опция \leqno. Она расшифровывается как "слева,
уравнение, нумеровать". Если мы это сделаем, запустим сейчас
документ обрабатываться, то все номера переедут в левую часть, там, где мы
и хотели. Если убрать эту опцию, то номера окажутся
в правой части, как и раньше. На этом закончено наше знакомство с оформлением математики в издательской
системе LaTeX.