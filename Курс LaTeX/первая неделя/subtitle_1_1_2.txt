Мы продолжаем разбираться в том, как
работает издательская система LaTeX. И в этом видео я покажу вам, как устроена логика взаимодействия
пользователя с этой системой. Но прежде я бы хотел сказать несколько
слов о том, где вы можете брать информацию о том, как делать те или иные вещи в этой
системе, если у вас возникнут вопросы. Существует несколько хороших учебных
пособий по LaTeX, написанных, в том числе, и
по-русски. Я здесь привожу ссылку на одно из них - это пособие Сергея Львовского,
оно на мой взгляд, является самой
лучшей книгой для тех, кто только начинает изучать эту
систему. К сожалению, Сергей Львовский написал эту
книгу больше десяти лет назад. И некоторые вещи там уже устарели. Но для новичка многое из того, что там
написано, будет очень полезно. Если что-то, что вам нужно сделать, не
написано у Львовского, то есть и другие учебные пособия, список которых, рекомендуемых мной, вы найдете в
материалах курса. Если в процессе того, как вы
изучаете этот курс, у вас будут возникать вопросы,
как делать те или иные вещи, то вы всегда можете зайти на форум и задать свои вопросы
нашим экспертам. Когда этот курс закончится, я
призываю вас оставаться на связи с помощью группы ВКонтакте, которую я сделал для курса изучения LaTeX в Высшей школе
экономики. Ссылку на нее вы увидите на слайде. Конечно, по-английски источников гораздо
больше. В том числе, очень новых и очень
современных. Список того, что я рекомендую читать по-английски, вы найдете в
материалах курса. Конечно, если вы знаете английский, то
изучение LaTeX пройдет более гладко, потому что многие команды, которые
используются там - это английские слова. Но, если вы не можете читать по-английски,
то, значит, эти слова будут
для вас новыми. Кроме того, если вы читаете по-английски, то вы всегда можете
обратиться к документации, которую написали
разработчики как LaTeX так и пакетов, которые вы подключаете для
работы. Ссылка, которая идет третьим пунктом
в этом списке - это tex.stackexchange.com,
это огромный форум на котором тысячи пользователей
LaTeX помогают друг другу решать те или иные задачи. В том числе, там много новичков, и если вы
чувствуете себя комфортно в том, чтобы писать по-английски, то вы
всегда можете зайти туда и задать свой вопрос. Кроме того, если вы попробуете
ввести формулировку задачи, которую вы хотите решить с помощью
Latex в Google, то, скорее всего, найдется кто-то, кто уже решал эту
задачу и опубликовал свое решение или на этом же самом форуме
tex.stackexchange.com или где-нибудь еще. Итак, как устроено взаимодействие
пользователя с издательской системой? Во-первых, как я говорил в прошлом видео,
то, что делаете непосредственно вы - это
редактируете исходный код. Ваше взаимодействие с системой будет
проходить в каком-то текстовом редакторе, в прошлый раз я сказал, что это
может быть даже Блокнот, но, конечно, Блокнот не
является самой удобной программой, потому что она разработана
для других целей. Есть множество редакторов, разработанных
специально для того, чтобы взаимодействовать с системой
LaTeX. В том числе, одно из их преимуществ — это то,
что в них есть разные кнопки, которые помогают, не вспоминая специальные
команды, просто нажимать на эти кнопки и использовать те, или иные
функции. Среди этих редакторов, вот я здесь
перечисляю - TeXStudio, TeXShop, WinEdt. Это очень хорошие программы, есть и другие
очень хорошие программы. Все они устроены примерно одинаково. В следующий раз я покажу вам, как
работать с одной из них. Когда вы введете свой исходный код,
вы должны скормить его системе, она должна прочитать его, обработать, и если у нее получится, создать исходный
документ. Создать выходной документ. Эта процедура называется компиляция. Компиляция - это процесс чтения вашего
исходного кода и его обработка. к сожалению, иногда, когда вы пишете свой
документ, система LaTeX не может понять что-то из того, что
вы написали. Может быть, вы ошиблись, может быть, вы недостаточно ясно выразились для
этой системы. Но, в этом случае, она будет ругаться, и скажет вам, что у нее что-то не
получилось. Это значит, что процесс
компиляции не приведет сразу к тому, что вы окажетесь в PDF, что вы сможете
увидеть ваш конечный документ, а приведет к
каким-то ошибкам. Эти ошибки написаны простым английским
языком, если вы не понимаете английский
язык, то вы можете обратиться к тому же самому
пособию Львовского, которое я упоминал. Там есть список этих ошибок с
расшифровкой, что каждая из них означает. И, кроме того, об этих ошибках
очень много информации в интернете. Эти ошибки вам придется исправить, то
есть если вы столкнетесь с тем, что система не может построить PDF-файл, то вам придется
вернуться в исходный код, и разобраться, где что-то пошло не
так. Повторять эту процедуру до тех пор, пока
все ошибки не будут устранены. Когда они будут устранены, у вас будет
итоговый документ PDF. Системы, которые отвечают за компиляцию, существуют разные. Во-первых,
есть такая система, которая называется
TeXLive, это, наверное, самый популярный
дистрибутив LaTeXa, и наверное, потому что он существует для
всех популярных операционных систем, как для Windows, так и для Mackintosh, так
и для Linux. Я рекомендую использовать его, на какой бы
системе вы ни были. Если у вас Mac, то TeXLive, будет в общем-то единственной системой, которую
можно использовать. И она поставляется в комплекте, который
называется MacTeX, просто введите в Google MacTeX,
и скачайте дистрибутив, который там будет по
ссылке, и у вас будет уже сразу работающая
система. Если у вас Windows или если у вас Linux,
то у вас могут быть некоторые проблемы с установкой, конечно же, как
обычно и вам потребуется делать какие-то
дополнительные действия. В материалах курса вы найдете краткую
инструкцию по установке дистрибутива для
разных операционных систем. Кроме того, существует такой дистрибутив
MikTeX, который сделан для Windows, тоже достаточно
популярный, однако, у меня с использованием его возникали
некоторые проблемы, поэтому с некоторых пор, я
предпочитаю TeXLive. Когда у вас будет гоовый PDF, то, конечно,
вы сможете открыть его какой-нибудь обычной программой для
просмотра PDF, например, Preview или Acrobat Reader. Зачастую, вместе с текстовыми редакторами, предназначенными специально для LaTeX,
идут специальные программы для просмотра PDF, они
отличаются от обычного Acrobat Reader тем, что вы можете щелкнуть правой
кнопкой на какое-то место в PDF-файле, и вернуться в исходный TeX-документ, в
исходный код, туда, куда вы щелкнули. То есть, увидеть в исходном коде то место,
которое вы выбрали в PDF. Совсем недавно появились несколько хороших сайтов, которые позволяют
проводить все эти процессы онлайн, то есть без
установки программы на компьютер. У такого подхода есть свои преимущества и
недостатки: с одной стороны, вы не можете получить к
ним доступ, если у вас нет интернета, то есть, вы не можете
отредактировать свою презентацию, пока летите в самолете,
чтобы ее представлять. Для этого вам нужно, чтобы у вас на компьютере, был установлен какой-то
движок для обработки LaTeX-документов. С другой стороны, у этих сайтов есть
также и достоинства. Вы всегда можете открыть их в любом
браузере, с любого компьютера, где есть доступ к интернету, и
получить доступ к своим документам. Я знаю два таких сайта, точнее, я
знаю три таких сайта, и два из них я рекомендую - это
WriteLaTeX и ShareLaTeX. Здесь - вы можете видеть в этой
схеме - что они позволяют сделать весь комплект действий, который
вам нужно, чтобы получить готовый
PDF-документ. На этом слайде вы видите структуру
типичного TeX-файла, то есть, того исходного кода, который вы будете писать, чтобы в итоге получился красивый
PDF-документ. Каждый файл, который вы будете делать,
начинается с команды \documentclass. Класс документа, если переводить
дословно. Вы можете видеть, обратный слэш перед
началом команды - это признак того, что вы говорите LaTeX: слово, которое идет
после обратного слэша, нужно воспринимать как
команду к действию. И команда \documentclass говорит
LaTeX о том, что вы начинаете писать документ для него, и также говорит, что
именно за документ вы собираетесь писать. Вот здесь вот, у команды \documentclass
есть два аргумента, то есть, вы не просто говорите
LaTeX, что вы хотите создать документ, но вы, во-первых,
говорите, что это за документ, в моем случае, это документ
класса article - статья. А, во-вторых, говорите сразу некоторые
атрибуты текста, которые вы хотите, чтобы в этом документе
были. Во-первых, вы хотите, чтобы документ был
на бумаге формата А4, во-вторых, вы хотите, чтобы в этом документе,
основной кегль шрифта был 12 пунктов. Скорее всего, если не написать команду про
бумагу А4, то все равно, TeX-документ будет в
формате бумаги А4. Это зависит от глобальных настроек,
которые есть в вашем дистрибутиве LaTeX. Однако, в некоторых странах популярен другой
формат, letter, который меняет некоторые другие
размеры и если вдруг, в вашем дистрибутиве, будет случайно установлен он, и вы создадите
PDF-документ в формате letter, то, может, вы ничего не заметите, но некоторые принтеры будут
ругаться, и вывод на принтер будет не совсем такой,
как вы видите на экране. Потому что размер бумаги не совпадет. Поэтому я рекомендую, на всякий случай,
писать здесь a4paper, чтобы удостовериться,
что будет нужный формат бумаги. После того, как вы задали класс документа,
вы можете написать какие-то команды, cлужебные, которые скажут LaTeX,
какими еще свойствами должен обладать
этот документ. Вот здесь отведено место для них. Ну, конечно, написанные русские буквы - это
не команды, это просто инструкция для нас с вами, чтобы
помнить, что здесь писать. Обратите внимание, что строчка начинается
со знака процент, и вот тут тоже есть знак процент. Это означает, что начинается комментарий. В любой строке, где встречается знак
процент, все, что идет после этого знака до конца строки,
игнорируется LaTeX. Если вы когда-нибудь
программировали, то вы знаете, что это такое. Это очень удобно, когда вы хотите
написать в документе что-то, что для вас или для
ваших соавторов. Но вы не хотите, чтобы это оказалось в
итоговом PDF-документе. То есть это будет видеть только тот, кто
редактирует текст. Итак, мы написали какие-то
служебные команды, их к концу курса у нас накопится очень много, и преамбула будет отдельным файлом, на несколько
экранов. После того, как мы это сделали, мы можем, собственно, приступить к написанию
текста документа. Текст документа начинается с
команды \begin{document}, и заканчивается командой
\end{document}. Вообще, begin и end - это очень
распространенные команды в LaTeX. Очень часто, когда вам нужно создать какую-то отдельную логическую структуру,
например, вот здесь, это документ, или, скажем, какое-то уравнение, формулы или группу
формул. То она будет начинаться с команды Begin,
а заканчиваться командой End. В зависимости от того, что идет в фигурных
скобках, LaTeX будет воспринимать это как
объект специального класса. Когда вы создадите документ, то,
во-первых, то, как он будет выглядеть, будет зависеть от класса,
который вы определили в самом начале. На прошлом слайде у меня был класс
article. Во-вторых, то, как он будет выглядеть,
зависит от того, что, собственно, вы в нем
напишите. Существует много классов, помимо article,
которые можно использовать. Здесь я привел четыре, которые, возможно, вам
пригодятся в первую очередь. Ну, article - это самый популярный формат,
который я вам рекомендую для большинства документов,
с которыми вы можете столкнуться. Это простейший формат, в котором, во-первых, поля на всех страницах
одинаковые. Что это значит? Если вы откроете хорошо изданную книжку,
то вы увидите, что на каждой странице поля, которые на внешней стороне,
отличаются по ширине от полей, которые на внутренней. Соответственно, на четных и нечетных
страницах, поля разные. Вот, класс article, по умолчанию, не
делает такого, то есть, там на всех страницах,
поля одинаковые. В отличие от класса book. Если вы хотите сделать книжку, то класс book - это хорошая идея, чтобы
использовать. В этом классе, вы сможете больше
себе позволить. То есть вы сможете сделать там какие-то большие разделы, главы, и там
будут специальным образом оформленные
колонтитулы, где будут автоматически подставляться фамилия автора и заглавие
этой книги. И там будут автоматически, правильным
образом, оформляться поля. То есть, поля на нечетных страницах
будут отличаться от полей на четных. Еще класс, на который я хотел бы
обратить внимание, - это класс beamer. Beamer - это то, чем мы будем заниматься в самом конце, на последней неделе нашего
курса. Он нужен для создания слайдов презентаций. Внутри документа вы скорее всего захотите создать какую-то
логическую структуру. То есть разделить его на главы,
параграфы, разделы и так далее. LaTeX, как я в прошлый раз говорил,
очень хорош во всем, что касается работы со
структурой документа. И он позволяет, во многом, этот процесс
автоматизировать. То есть, вы пишите специальные команды, а
дальше система сама заботится о том, как нужно оформить то,
что вы написали. Самая большая, самая главная
единица структурная в документах LaTeX, это часть, part.
Внутри части, то есть, ну представьте себе, что вы
пишите книгу, и там есть часть один, и часть два. То есть это как бы тома книги. Внутри части есть глава, то есть
следующая структурная единица - это глава. Она есть в классах book и report. То есть если вы находитесь в
классе article, статья, то там подразумевается, что глав не
может быть. Там начинается все с разделов. Это, скорее всего, сделано не
случайно, потому что часто так бывает, что книгу, главы книги
делают из статей. И заботливые создатели LaTeX
сделали так, чтобы автор сам себе не навредил. То есть вы делаете статью, в статье
главная единица - это section, и если вы потом хотите
объединить несколько статей в главы, то просто поднимаетесь на
уровень вверх, каждой статье назначаете свою главу, и у
вас получается книга. Section - это можно перевести как раздел
или параграф. Subsection - это следующий элемент
структуры, подраздел. Есть даже subsubsection - подподраздел. Ну и еще две единицы - paragraph и
subparagraph, которые означают абзацы. Это слово - ложный друг
переводчика. Слово paragraph не нужно переводить как параграф, по-русски параграф - это
section. Одна из особенностей, которая упрощает
работу с LaTeX - это перекрестные ссылки. Вы можете поставить ссылку на любой объект в вашем документе, у которого есть
какой-то счетчик. То есть, если что-то в документе нумеруется, например, главы, параграфы,
уравнения, рисунки, таблицы, то вы можете поставить на него ссылку, так, что эта ссылка будет сформирована
автоматически. Что я имею ввиду: скажем, есть у вас
какое-нибудь уравнение, рядом с этим уравнением, или там может быть
название главы, или рисунка, таблицы. Рядом с этим уравнением вы можете
написать специальную команду \label, у команды \label один аргумент в
фигурных скобках. Это имя этой команды. То есть вы можете, там,
например, если вы хотите ссылаться на разделы, то
удобно писать \label, дальше sec от слова section
это необязательно, но это поможет вам
логически организовать эти ссылки. Ну, и название какое-то, понятное вам, этой
главы. Скажем, ссылка на теорему Пифагора, могла
бы выглядеть так, точнее, не ссылка, а метка у теоремы Пифагора могла бы выглядеть так,
\label, дальше th от слова теорема, и название этой
теоремы. Вы можете, если вы еще делаете не окончательную версию документа, а
какой-то черновик для того, чтобы его напечатать, и посмотреть
как он выглядит, то с помощью подключения
специального пакета showkeys, вы можете прямо
рядом со всеми этими теоремами, разделами,
таблицами, на которые вы ссылаетесь, прямо рядом с ними
увидеть, что у той или иной таблицы стоит метка. Иногда, это помогает уже при окончательной
правке документа проверить, что все ссылки стоят
корректно. Когда вы расставили эти метки, дальше вы
можете упоминать их в тексте. Вы можете написать где-то в тексте команду
\ref с одним аргументом в фигурных скобках, который вы возьмете из соответствующего
\label, на который вы хотите сослаться. И вместо того, чтобы показать вот
это, то есть, показать сам \ref{name} в
PDF-документе будет номер этого объекта. Скажем, если вы ссылаетесь на теорему,
которая получила номер три точка два, то вместо \ref{name} будет
написано три точка два. Вы также можете написать команду \pageref,
и там подставится номер страницы, на котором
окажется объект, на который вы ссылаетесь. Естественно, этот номер будет рассчитан
автоматически. Если вы переделаете весь документ, и
номера страницы изменятся, то изменятся автоматически и номера страниц, которые отображаются с помощью этих
ссылок. Ну, и есть специальная команда, чтобы
ссылаться на уравнение, чуть позже, в следующем видео, я покажу, почему именно с
ней, именно ее нужно использовать. Также есть некоторые специальные пакеты, которые совершенствуют работу с этими
ссылками. Скажем, есть такой пакет
varioref, который позволяет делать более хитрые ссылки,
чем просто \pageref. Скажем, вы хотите написать уравнение три
точка два на странице 18, но если эта ссылка сама окажется на странице 18, то есть она недалеко от уравнения, то это будет
выглядеть глупо. Вы ссылаетесь на страницу, на которой
прямо сейчас находитесь,
пользователю не нужно ничего перелистывать. Так вот, пакет в varioref позволит вам
сделать так, что эти ссылки автоматически будут заменяться на
что-нибудь типа "на этой странице", или "на следующей
странице". И эти ссылки будут гораздо более
интеллектуально выглядеть. Если вы подключите пакет hypperref -
гипперссылки, что мы научимся делать позже, то в вашем PDF, можно будет нажимать мышкой на
соответствующие номера, то есть если вам где-то, где-то
встретилась такая фраза, как: теорема три точка
два, то вы можете нажать на эту фразу, и оказаться там, где эта теорема, то есть,
ваш просмотрщик, программа просмотрщик PDF,
автоматически перенесет вас туда, куда нужно. Итак, мы готовы к тому, чтобы начать
работать непосредственно с LaTeX и создать наш
первый документ. Во-первых, я хотел бы
сказать, что один их двух сайтов, которые я упоминал раньше,
которые нужны для компиляции, WriteLaTeX и ShareLaTeX,
основатели одного из этих двух сайтов, а именно WriteLaTeX, любезно согласились технически подерживать
наш курс. И поэтому материалы, которые
я буду для вас размещать, в основном, будут
поставляться через этот сайт. Это чрезвычайно удобно, потому что так, вы
сможете непосредственно открывать их и работать с ними сразу же,
не скачивая их на компьютер, не устанавливая
ничего. Так вы сможете познакомиться с LaTeX очень
быстро - прямо сейчас. Если вам понравится этот сайт, если вы
захотите работать с LaTeX, и вы захотите на нем зарегистрироваться,
вообще-то, он доступен и без регистрации, но, если вы захотите зарегистрироваться, я
прошу вас использовать вот эту ссылку — так мы сможем смотреть, кто пришел с
нашего курса на этот сайт. И, кроме того, если вы будете
регистрироваться по этой ссылке, то вы получите дополнительные бесплатные 50
Мегабайт для хранения ваших документов на этом сайте. Итак, давайте создадим наш первый
LaTeX-документ. Перейдите по ссылке, которая здесь в
первой строчке.